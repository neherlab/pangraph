use crate::io::json_schema::jsonschema_write_file;
use crate::pangraph::pangraph::Pangraph;
use clap::{Parser, ValueHint};
use eyre::{Report, WrapErr};
use schemars::JsonSchema;
use std::fmt::Debug;
use std::path::PathBuf;

#[derive(Parser, Debug)]
pub struct PangraphGenerateSchemaArgs {
  /// Path to output JSON or YAML file to write generated JSON Schema definitions to.
  ///
  /// Use "-" to write the uncompressed data to standard output. This is the default, if this argument is not provided.
  ///
  /// See: https://json-schema.org
  #[clap(long, short = 'o', default_value = "-")]
  #[clap(value_hint = ValueHint::AnyPath)]
  pub output_pangraph_schema: PathBuf,
}

pub fn generate_schema(args: &PangraphGenerateSchemaArgs) -> Result<(), Report> {
  let PangraphGenerateSchemaArgs { output_pangraph_schema } = &args;
  jsonschema_write_file::<_PangraphSchemaRoot>(&Some(output_pangraph_schema))
    .wrap_err("When writing JSON Schema for type '_PangraphSchemaRoot'")
}

// Dummy struct containing the types we want to expose (recursively).
//
// The doc comment below will appear in the schema file. Schema file should not be edited manually. But despite this
// comment also being here, you CAN edit this struct. Go ahead!
//
/// AUTOGENERATED! This JSON schema file is generated automatically from Rust types.
/// The root object definition is a dummy container for the types being exposed. Disregard
/// it. Instead, see the actual types in the `definitions` property of that container.
#[allow(dead_code)]
#[derive(Clone, Debug, JsonSchema)]
pub struct _PangraphSchemaRoot {
  pangraph: Pangraph,
}
