/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
  storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
  #[inline]
  pub const fn new(storage: Storage) -> Self {
    Self { storage }
  }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
  Storage: AsRef<[u8]> + AsMut<[u8]>,
{
  #[inline]
  pub fn get_bit(&self, index: usize) -> bool {
    debug_assert!(index / 8 < self.storage.as_ref().len());
    let byte_index = index / 8;
    let byte = self.storage.as_ref()[byte_index];
    let bit_index = if cfg!(target_endian = "big") {
      7 - (index % 8)
    } else {
      index % 8
    };
    let mask = 1 << bit_index;
    byte & mask == mask
  }
  #[inline]
  pub fn set_bit(&mut self, index: usize, val: bool) {
    debug_assert!(index / 8 < self.storage.as_ref().len());
    let byte_index = index / 8;
    let byte = &mut self.storage.as_mut()[byte_index];
    let bit_index = if cfg!(target_endian = "big") {
      7 - (index % 8)
    } else {
      index % 8
    };
    let mask = 1 << bit_index;
    if val {
      *byte |= mask;
    } else {
      *byte &= !mask;
    }
  }
  #[inline]
  pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
    debug_assert!(bit_width <= 64);
    debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
    debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
    let mut val = 0;
    for i in 0..(bit_width as usize) {
      if self.get_bit(i + bit_offset) {
        let index = if cfg!(target_endian = "big") {
          bit_width as usize - 1 - i
        } else {
          i
        };
        val |= 1 << index;
      }
    }
    val
  }
  #[inline]
  pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
    debug_assert!(bit_width <= 64);
    debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
    debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
    for i in 0..(bit_width as usize) {
      let mask = 1 << i;
      let val_bit_is_set = val & mask == mask;
      let index = if cfg!(target_endian = "big") {
        bit_width as usize - 1 - i
      } else {
        i
      };
      self.set_bit(index + bit_offset, val_bit_is_set);
    }
  }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
  #[inline]
  pub const fn new() -> Self {
    __IncompleteArrayField(::std::marker::PhantomData, [])
  }
  #[inline]
  pub fn as_ptr(&self) -> *const T {
    self as *const _ as *const T
  }
  #[inline]
  pub fn as_mut_ptr(&mut self) -> *mut T {
    self as *mut _ as *mut T
  }
  #[inline]
  pub unsafe fn as_slice(&self, len: usize) -> &[T] {
    ::std::slice::from_raw_parts(self.as_ptr(), len)
  }
  #[inline]
  pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
    ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
  }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
  fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    fmt.write_str("__IncompleteArrayField")
  }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
#[allow(unsafe_code)]
pub const __DARWIN_SUF_EXTSN: &::std::ffi::CStr =
  unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"$DARWIN_EXTSN\0") };
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
#[allow(unsafe_code)]
pub const P_tmpdir: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"/var/tmp/\0") };
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
#[allow(unsafe_code)]
pub const MM_VERSION: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"2.26-r1175\0") };
pub const MM_F_NO_DIAG: u32 = 1;
pub const MM_F_NO_DUAL: u32 = 2;
pub const MM_F_CIGAR: u32 = 4;
pub const MM_F_OUT_SAM: u32 = 8;
pub const MM_F_NO_QUAL: u32 = 16;
pub const MM_F_OUT_CG: u32 = 32;
pub const MM_F_OUT_CS: u32 = 64;
pub const MM_F_SPLICE: u32 = 128;
pub const MM_F_SPLICE_FOR: u32 = 256;
pub const MM_F_SPLICE_REV: u32 = 512;
pub const MM_F_NO_LJOIN: u32 = 1024;
pub const MM_F_OUT_CS_LONG: u32 = 2048;
pub const MM_F_SR: u32 = 4096;
pub const MM_F_FRAG_MODE: u32 = 8192;
pub const MM_F_NO_PRINT_2ND: u32 = 16384;
pub const MM_F_2_IO_THREADS: u32 = 32768;
pub const MM_F_LONG_CIGAR: u32 = 65536;
pub const MM_F_INDEPEND_SEG: u32 = 131072;
pub const MM_F_SPLICE_FLANK: u32 = 262144;
pub const MM_F_SOFTCLIP: u32 = 524288;
pub const MM_F_FOR_ONLY: u32 = 1048576;
pub const MM_F_REV_ONLY: u32 = 2097152;
pub const MM_F_HEAP_SORT: u32 = 4194304;
pub const MM_F_ALL_CHAINS: u32 = 8388608;
pub const MM_F_OUT_MD: u32 = 16777216;
pub const MM_F_COPY_COMMENT: u32 = 33554432;
pub const MM_F_EQX: u32 = 67108864;
pub const MM_F_PAF_NO_HIT: u32 = 134217728;
pub const MM_F_NO_END_FLT: u32 = 268435456;
pub const MM_F_HARD_MLEVEL: u32 = 536870912;
pub const MM_F_SAM_HIT_ONLY: u32 = 1073741824;
pub const MM_F_RMQ: u32 = 2147483648;
pub const MM_F_QSTRAND: u64 = 4294967296;
pub const MM_F_NO_INV: u64 = 8589934592;
pub const MM_F_NO_HASH_NAME: u64 = 17179869184;
pub const MM_F_SPLICE_OLD: u64 = 34359738368;
pub const MM_F_SECONDARY_SEQ: u64 = 68719476736;
pub const MM_I_HPC: u32 = 1;
pub const MM_I_NO_SEQ: u32 = 2;
pub const MM_I_NO_NAME: u32 = 4;
#[allow(unsafe_code)]
pub const MM_IDX_MAGIC: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MMI\x02\0") };
pub const MM_MAX_SEG: u32 = 255;
pub const MM_CIGAR_MATCH: u32 = 0;
pub const MM_CIGAR_INS: u32 = 1;
pub const MM_CIGAR_DEL: u32 = 2;
pub const MM_CIGAR_N_SKIP: u32 = 3;
pub const MM_CIGAR_SOFTCLIP: u32 = 4;
pub const MM_CIGAR_HARDCLIP: u32 = 5;
pub const MM_CIGAR_PADDING: u32 = 6;
pub const MM_CIGAR_EQ_MATCH: u32 = 7;
pub const MM_CIGAR_X_MISMATCH: u32 = 8;
#[allow(unsafe_code)]
pub const MM_CIGAR_STR: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"MIDNSHP=XB\0") };
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_CURRENT: u32 = 5;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
#[allow(unsafe_code)]
pub const AC_VERSION_KHASH_H: &::std::ffi::CStr =
  unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"0.2.8\0") };
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
#[allow(unsafe_code)]
pub const _RUNE_MAGIC_A: &::std::ffi::CStr = unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"RuneMagA\0") };
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const KS_SEP_SPACE: u32 = 0;
pub const KS_SEP_TAB: u32 = 1;
pub const KS_SEP_LINE: u32 = 2;
pub const KS_SEP_MAX: u32 = 2;
pub const KSW_NEG_INF: i32 = -1073741824;
pub const KSW_EZ_SCORE_ONLY: u32 = 1;
pub const KSW_EZ_RIGHT: u32 = 2;
pub const KSW_EZ_GENERIC_SC: u32 = 4;
pub const KSW_EZ_APPROX_MAX: u32 = 8;
pub const KSW_EZ_APPROX_DROP: u32 = 16;
pub const KSW_EZ_EXTZ_ONLY: u32 = 64;
pub const KSW_EZ_REV_CIGAR: u32 = 128;
pub const KSW_EZ_SPLICE_FOR: u32 = 256;
pub const KSW_EZ_SPLICE_REV: u32 = 512;
pub const KSW_EZ_SPLICE_FLANK: u32 = 1024;
pub const KSW_EZ_SPLICE_CMPLX: u32 = 2048;
pub const KSW_CIGAR_MATCH: u32 = 0;
pub const KSW_CIGAR_INS: u32 = 1;
pub const KSW_CIGAR_DEL: u32 = 2;
pub const KSW_CIGAR_N_SKIP: u32 = 3;
pub const MM_PARENT_UNSET: i32 = -1;
pub const MM_PARENT_TMP_PRI: i32 = -2;
pub const MM_DBG_NO_KALLOC: u32 = 1;
pub const MM_DBG_PRINT_QNAME: u32 = 2;
pub const MM_DBG_PRINT_SEED: u32 = 4;
pub const MM_DBG_PRINT_ALN_SEQ: u32 = 8;
pub const MM_DBG_PRINT_CHAIN: u32 = 16;
pub const MM_SEED_LONG_JOIN: u64 = 1099511627776;
pub const MM_SEED_IGNORE: u64 = 2199023255552;
pub const MM_SEED_TANDEM: u64 = 4398046511104;
pub const MM_SEED_SELF: u64 = 8796093022208;
pub const MM_SEED_SEG_SHIFT: u32 = 48;
pub const MM_SEED_SEG_MASK: u64 = 71776119061217280;
pub const ko_no_argument: u32 = 0;
pub const ko_required_argument: u32 = 1;
pub const ko_optional_argument: u32 = 2;
pub const KRMQ_MAX_DEPTH: u32 = 64;
pub const RS_MIN_SIZE: u32 = 64;
pub const RS_MAX_BITS: u32 = 8;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
  pub __mbstate8: [::std::os::raw::c_char; 128usize],
  pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
  ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
  ["Offset of field: __mbstate_t::__mbstate8"][::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
  ["Offset of field: __mbstate_t::_mbstateL"][::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
  pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
  pub __arg: *mut ::std::os::raw::c_void,
  pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_pthread_handler_rec"][::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
  ["Alignment of __darwin_pthread_handler_rec"][::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
  ["Offset of field: __darwin_pthread_handler_rec::__routine"]
    [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
  ["Offset of field: __darwin_pthread_handler_rec::__arg"]
    [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
  ["Offset of field: __darwin_pthread_handler_rec::__next"]
    [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
  ["Alignment of _opaque_pthread_attr_t"][::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
  ["Offset of field: _opaque_pthread_attr_t::__sig"][::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_attr_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
  ["Alignment of _opaque_pthread_cond_t"][::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
  ["Offset of field: _opaque_pthread_cond_t::__sig"][::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_cond_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_condattr_t"][::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
  ["Alignment of _opaque_pthread_condattr_t"][::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
  ["Offset of field: _opaque_pthread_condattr_t::__sig"]
    [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
  ["Alignment of _opaque_pthread_mutex_t"][::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
  ["Offset of field: _opaque_pthread_mutex_t::__sig"][::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_mutexattr_t"][::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
  ["Alignment of _opaque_pthread_mutexattr_t"][::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
  ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
    [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
  ["Alignment of _opaque_pthread_once_t"][::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
  ["Offset of field: _opaque_pthread_once_t::__sig"][::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_once_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_rwlock_t"][::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
  ["Alignment of _opaque_pthread_rwlock_t"][::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
  ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
    [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
  pub __sig: ::std::os::raw::c_long,
  pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_rwlockattr_t"][::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
  ["Alignment of _opaque_pthread_rwlockattr_t"][::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
  ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
    [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
    [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
  pub __sig: ::std::os::raw::c_long,
  pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
  pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
  ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
  ["Offset of field: _opaque_pthread_t::__sig"][::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
  ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
    [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
  ["Offset of field: _opaque_pthread_t::__opaque"][::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
extern "C" {
  pub fn renameat(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
    arg4: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn renamex_np(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn renameatx_np(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
    arg4: *const ::std::os::raw::c_char,
    arg5: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
  pub _base: *mut ::std::os::raw::c_uchar,
  pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
  ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
  ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
  ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
  pub _p: *mut ::std::os::raw::c_uchar,
  pub _r: ::std::os::raw::c_int,
  pub _w: ::std::os::raw::c_int,
  pub _flags: ::std::os::raw::c_short,
  pub _file: ::std::os::raw::c_short,
  pub _bf: __sbuf,
  pub _lbfsize: ::std::os::raw::c_int,
  pub _cookie: *mut ::std::os::raw::c_void,
  pub _close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>,
  pub _read: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      arg2: *mut ::std::os::raw::c_char,
      arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub _seek: ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: fpos_t, arg3: ::std::os::raw::c_int) -> fpos_t,
  >,
  pub _write: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      arg2: *const ::std::os::raw::c_char,
      arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub _ub: __sbuf,
  pub _extra: *mut __sFILEX,
  pub _ur: ::std::os::raw::c_int,
  pub _ubuf: [::std::os::raw::c_uchar; 3usize],
  pub _nbuf: [::std::os::raw::c_uchar; 1usize],
  pub _lb: __sbuf,
  pub _blksize: ::std::os::raw::c_int,
  pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
  ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
  ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
  ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
  ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
  ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
  ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
  ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
  ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
  ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
  ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
  ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
  ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
  ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
  ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
  ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
  ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
  ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
  ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
  ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
  ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
  ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
extern "C" {
  pub static mut __stdinp: *mut FILE;
}
extern "C" {
  pub static mut __stdoutp: *mut FILE;
}
extern "C" {
  pub static mut __stderrp: *mut FILE;
}
extern "C" {
  pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
  pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgets(
    arg1: *mut ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
    arg3: *mut FILE,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn fopen(__filename: *const ::std::os::raw::c_char, __mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
  pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fread(
    __ptr: *mut ::std::os::raw::c_void,
    __size: ::std::os::raw::c_ulong,
    __nitems: ::std::os::raw::c_ulong,
    __stream: *mut FILE,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn freopen(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: *mut FILE,
  ) -> *mut FILE;
}
extern "C" {
  pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn fwrite(
    __ptr: *const ::std::os::raw::c_void,
    __size: ::std::os::raw::c_ulong,
    __nitems: ::std::os::raw::c_ulong,
    __stream: *mut FILE,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn rename(__old: *const ::std::os::raw::c_char, __new: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn rewind(arg1: *mut FILE);
}
extern "C" {
  pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn setvbuf(
    arg1: *mut FILE,
    arg2: *mut ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
    arg4: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sprintf(arg1: *mut ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sscanf(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char, ...)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn tmpfile() -> *mut FILE;
}
extern "C" {
  pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vfprintf(
    arg1: *mut FILE,
    arg2: *const ::std::os::raw::c_char,
    arg3: __builtin_va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: __builtin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsprintf(
    arg1: *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: __builtin_va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
  pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn popen(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
  pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, arg3: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
  pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
  pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn tempnam(
    __dir: *const ::std::os::raw::c_char,
    __prefix: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
  pub fn fseeko(__stream: *mut FILE, __offset: off_t, __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
  pub fn snprintf(
    __str: *mut ::std::os::raw::c_char,
    __size: ::std::os::raw::c_ulong,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vfscanf(
    __stream: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    arg1: __builtin_va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vscanf(__format: *const ::std::os::raw::c_char, arg1: __builtin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsnprintf(
    __str: *mut ::std::os::raw::c_char,
    __size: ::std::os::raw::c_ulong,
    __format: *const ::std::os::raw::c_char,
    arg1: __builtin_va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsscanf(
    __str: *const ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    arg1: __builtin_va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn dprintf(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vdprintf(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_char,
    arg3: va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getdelim(
    __linep: *mut *mut ::std::os::raw::c_char,
    __linecapp: *mut usize,
    __delimiter: ::std::os::raw::c_int,
    __stream: *mut FILE,
  ) -> isize;
}
extern "C" {
  pub fn getline(__linep: *mut *mut ::std::os::raw::c_char, __linecapp: *mut usize, __stream: *mut FILE) -> isize;
}
extern "C" {
  pub fn fmemopen(
    __buf: *mut ::std::os::raw::c_void,
    __size: usize,
    __mode: *const ::std::os::raw::c_char,
  ) -> *mut FILE;
}
extern "C" {
  pub fn open_memstream(__bufp: *mut *mut ::std::os::raw::c_char, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
  pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
  pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
  pub fn asprintf(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn fmtcheck(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char, arg3: ::std::os::raw::c_int);
}
extern "C" {
  pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vasprintf(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn zopen(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
  ) -> *mut FILE;
}
extern "C" {
  pub fn funopen(
    arg1: *const ::std::os::raw::c_void,
    arg2: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
      ) -> ::std::os::raw::c_int,
    >,
    arg3: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
      ) -> ::std::os::raw::c_int,
    >,
    arg4: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: fpos_t, arg3: ::std::os::raw::c_int) -> fpos_t,
    >,
    arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>,
  ) -> *mut FILE;
}
extern "C" {
  pub fn __sprintf_chk(
    arg1: *mut ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
    arg3: usize,
    arg4: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __snprintf_chk(
    arg1: *mut ::std::os::raw::c_char,
    arg2: usize,
    arg3: ::std::os::raw::c_int,
    arg4: usize,
    arg5: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __vsprintf_chk(
    arg1: *mut ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
    arg3: usize,
    arg4: *const ::std::os::raw::c_char,
    arg5: va_list,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __vsnprintf_chk(
    arg1: *mut ::std::os::raw::c_char,
    arg2: usize,
    arg3: ::std::os::raw::c_int,
    arg4: usize,
    arg5: *const ::std::os::raw::c_char,
    arg6: va_list,
  ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
  pub __val: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
  ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
  ["Offset of field: _OSUnalignedU16::__val"][::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
  pub __val: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
  ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
  ["Offset of field: _OSUnalignedU32::__val"][::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
  pub __val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
  ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
  ["Offset of field: _OSUnalignedU64::__val"][::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
  pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
  ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
  ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
extern "C" {
  pub fn __darwin_check_fd_set_overflow(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_void,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm128_t {
  pub x: u64,
  pub y: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm128_t"][::std::mem::size_of::<mm128_t>() - 16usize];
  ["Alignment of mm128_t"][::std::mem::align_of::<mm128_t>() - 8usize];
  ["Offset of field: mm128_t::x"][::std::mem::offset_of!(mm128_t, x) - 0usize];
  ["Offset of field: mm128_t::y"][::std::mem::offset_of!(mm128_t, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm128_v {
  pub n: usize,
  pub m: usize,
  pub a: *mut mm128_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm128_v"][::std::mem::size_of::<mm128_v>() - 24usize];
  ["Alignment of mm128_v"][::std::mem::align_of::<mm128_v>() - 8usize];
  ["Offset of field: mm128_v::n"][::std::mem::offset_of!(mm128_v, n) - 0usize];
  ["Offset of field: mm128_v::m"][::std::mem::offset_of!(mm128_v, m) - 8usize];
  ["Offset of field: mm128_v::a"][::std::mem::offset_of!(mm128_v, a) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_seq_t {
  pub name: *mut ::std::os::raw::c_char,
  pub offset: u64,
  pub len: u32,
  pub is_alt: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_idx_seq_t"][::std::mem::size_of::<mm_idx_seq_t>() - 24usize];
  ["Alignment of mm_idx_seq_t"][::std::mem::align_of::<mm_idx_seq_t>() - 8usize];
  ["Offset of field: mm_idx_seq_t::name"][::std::mem::offset_of!(mm_idx_seq_t, name) - 0usize];
  ["Offset of field: mm_idx_seq_t::offset"][::std::mem::offset_of!(mm_idx_seq_t, offset) - 8usize];
  ["Offset of field: mm_idx_seq_t::len"][::std::mem::offset_of!(mm_idx_seq_t, len) - 16usize];
  ["Offset of field: mm_idx_seq_t::is_alt"][::std::mem::offset_of!(mm_idx_seq_t, is_alt) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_t {
  pub b: i32,
  pub w: i32,
  pub k: i32,
  pub flag: i32,
  pub n_seq: u32,
  pub index: i32,
  pub n_alt: i32,
  pub seq: *mut mm_idx_seq_t,
  pub S: *mut u32,
  pub B: *mut mm_idx_bucket_s,
  pub I: *mut mm_idx_intv_s,
  pub km: *mut ::std::os::raw::c_void,
  pub h: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_idx_t"][::std::mem::size_of::<mm_idx_t>() - 80usize];
  ["Alignment of mm_idx_t"][::std::mem::align_of::<mm_idx_t>() - 8usize];
  ["Offset of field: mm_idx_t::b"][::std::mem::offset_of!(mm_idx_t, b) - 0usize];
  ["Offset of field: mm_idx_t::w"][::std::mem::offset_of!(mm_idx_t, w) - 4usize];
  ["Offset of field: mm_idx_t::k"][::std::mem::offset_of!(mm_idx_t, k) - 8usize];
  ["Offset of field: mm_idx_t::flag"][::std::mem::offset_of!(mm_idx_t, flag) - 12usize];
  ["Offset of field: mm_idx_t::n_seq"][::std::mem::offset_of!(mm_idx_t, n_seq) - 16usize];
  ["Offset of field: mm_idx_t::index"][::std::mem::offset_of!(mm_idx_t, index) - 20usize];
  ["Offset of field: mm_idx_t::n_alt"][::std::mem::offset_of!(mm_idx_t, n_alt) - 24usize];
  ["Offset of field: mm_idx_t::seq"][::std::mem::offset_of!(mm_idx_t, seq) - 32usize];
  ["Offset of field: mm_idx_t::S"][::std::mem::offset_of!(mm_idx_t, S) - 40usize];
  ["Offset of field: mm_idx_t::B"][::std::mem::offset_of!(mm_idx_t, B) - 48usize];
  ["Offset of field: mm_idx_t::I"][::std::mem::offset_of!(mm_idx_t, I) - 56usize];
  ["Offset of field: mm_idx_t::km"][::std::mem::offset_of!(mm_idx_t, km) - 64usize];
  ["Offset of field: mm_idx_t::h"][::std::mem::offset_of!(mm_idx_t, h) - 72usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct mm_extra_t {
  pub capacity: u32,
  pub dp_score: i32,
  pub dp_max: i32,
  pub dp_max2: i32,
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
  pub n_cigar: u32,
  pub cigar: __IncompleteArrayField<u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_extra_t"][::std::mem::size_of::<mm_extra_t>() - 24usize];
  ["Alignment of mm_extra_t"][::std::mem::align_of::<mm_extra_t>() - 4usize];
  ["Offset of field: mm_extra_t::capacity"][::std::mem::offset_of!(mm_extra_t, capacity) - 0usize];
  ["Offset of field: mm_extra_t::dp_score"][::std::mem::offset_of!(mm_extra_t, dp_score) - 4usize];
  ["Offset of field: mm_extra_t::dp_max"][::std::mem::offset_of!(mm_extra_t, dp_max) - 8usize];
  ["Offset of field: mm_extra_t::dp_max2"][::std::mem::offset_of!(mm_extra_t, dp_max2) - 12usize];
  ["Offset of field: mm_extra_t::n_cigar"][::std::mem::offset_of!(mm_extra_t, n_cigar) - 20usize];
  ["Offset of field: mm_extra_t::cigar"][::std::mem::offset_of!(mm_extra_t, cigar) - 24usize];
};
impl mm_extra_t {
  #[inline]
  pub fn n_ambi(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_n_ambi(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn trans_strand(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_trans_strand(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(30usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(n_ambi: u32, trans_strand: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 30u8, {
      let n_ambi: u32 = unsafe { ::std::mem::transmute(n_ambi) };
      n_ambi as u64
    });
    __bindgen_bitfield_unit.set(30usize, 2u8, {
      let trans_strand: u32 = unsafe { ::std::mem::transmute(trans_strand) };
      trans_strand as u64
    });
    __bindgen_bitfield_unit
  }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_reg1_t {
  pub id: i32,
  pub cnt: i32,
  pub rid: i32,
  pub score: i32,
  pub qs: i32,
  pub qe: i32,
  pub rs: i32,
  pub re: i32,
  pub parent: i32,
  pub subsc: i32,
  pub as_: i32,
  pub mlen: i32,
  pub blen: i32,
  pub n_sub: i32,
  pub score0: i32,
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
  pub hash: u32,
  pub div: f32,
  pub p: *mut mm_extra_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_reg1_t"][::std::mem::size_of::<mm_reg1_t>() - 80usize];
  ["Alignment of mm_reg1_t"][::std::mem::align_of::<mm_reg1_t>() - 8usize];
  ["Offset of field: mm_reg1_t::id"][::std::mem::offset_of!(mm_reg1_t, id) - 0usize];
  ["Offset of field: mm_reg1_t::cnt"][::std::mem::offset_of!(mm_reg1_t, cnt) - 4usize];
  ["Offset of field: mm_reg1_t::rid"][::std::mem::offset_of!(mm_reg1_t, rid) - 8usize];
  ["Offset of field: mm_reg1_t::score"][::std::mem::offset_of!(mm_reg1_t, score) - 12usize];
  ["Offset of field: mm_reg1_t::qs"][::std::mem::offset_of!(mm_reg1_t, qs) - 16usize];
  ["Offset of field: mm_reg1_t::qe"][::std::mem::offset_of!(mm_reg1_t, qe) - 20usize];
  ["Offset of field: mm_reg1_t::rs"][::std::mem::offset_of!(mm_reg1_t, rs) - 24usize];
  ["Offset of field: mm_reg1_t::re"][::std::mem::offset_of!(mm_reg1_t, re) - 28usize];
  ["Offset of field: mm_reg1_t::parent"][::std::mem::offset_of!(mm_reg1_t, parent) - 32usize];
  ["Offset of field: mm_reg1_t::subsc"][::std::mem::offset_of!(mm_reg1_t, subsc) - 36usize];
  ["Offset of field: mm_reg1_t::as_"][::std::mem::offset_of!(mm_reg1_t, as_) - 40usize];
  ["Offset of field: mm_reg1_t::mlen"][::std::mem::offset_of!(mm_reg1_t, mlen) - 44usize];
  ["Offset of field: mm_reg1_t::blen"][::std::mem::offset_of!(mm_reg1_t, blen) - 48usize];
  ["Offset of field: mm_reg1_t::n_sub"][::std::mem::offset_of!(mm_reg1_t, n_sub) - 52usize];
  ["Offset of field: mm_reg1_t::score0"][::std::mem::offset_of!(mm_reg1_t, score0) - 56usize];
  ["Offset of field: mm_reg1_t::hash"][::std::mem::offset_of!(mm_reg1_t, hash) - 64usize];
  ["Offset of field: mm_reg1_t::div"][::std::mem::offset_of!(mm_reg1_t, div) - 68usize];
  ["Offset of field: mm_reg1_t::p"][::std::mem::offset_of!(mm_reg1_t, p) - 72usize];
};
impl mm_reg1_t {
  #[inline]
  pub fn mapq(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_mapq(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn split(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_split(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn rev(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_rev(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(10usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn inv(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_inv(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(11usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn sam_pri(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_sam_pri(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn proper_frag(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_proper_frag(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn pe_thru(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_pe_thru(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(14usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn seg_split(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_seg_split(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(15usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn seg_id(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_seg_id(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn split_inv(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_split_inv(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(24usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn is_alt(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_is_alt(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(25usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn strand_retained(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_strand_retained(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(26usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn dummy(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
  }
  #[inline]
  pub fn set_dummy(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(27usize, 5u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    mapq: u32,
    split: u32,
    rev: u32,
    inv: u32,
    sam_pri: u32,
    proper_frag: u32,
    pe_thru: u32,
    seg_split: u32,
    seg_id: u32,
    split_inv: u32,
    is_alt: u32,
    strand_retained: u32,
    dummy: u32,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let mapq: u32 = unsafe { ::std::mem::transmute(mapq) };
      mapq as u64
    });
    __bindgen_bitfield_unit.set(8usize, 2u8, {
      let split: u32 = unsafe { ::std::mem::transmute(split) };
      split as u64
    });
    __bindgen_bitfield_unit.set(10usize, 1u8, {
      let rev: u32 = unsafe { ::std::mem::transmute(rev) };
      rev as u64
    });
    __bindgen_bitfield_unit.set(11usize, 1u8, {
      let inv: u32 = unsafe { ::std::mem::transmute(inv) };
      inv as u64
    });
    __bindgen_bitfield_unit.set(12usize, 1u8, {
      let sam_pri: u32 = unsafe { ::std::mem::transmute(sam_pri) };
      sam_pri as u64
    });
    __bindgen_bitfield_unit.set(13usize, 1u8, {
      let proper_frag: u32 = unsafe { ::std::mem::transmute(proper_frag) };
      proper_frag as u64
    });
    __bindgen_bitfield_unit.set(14usize, 1u8, {
      let pe_thru: u32 = unsafe { ::std::mem::transmute(pe_thru) };
      pe_thru as u64
    });
    __bindgen_bitfield_unit.set(15usize, 1u8, {
      let seg_split: u32 = unsafe { ::std::mem::transmute(seg_split) };
      seg_split as u64
    });
    __bindgen_bitfield_unit.set(16usize, 8u8, {
      let seg_id: u32 = unsafe { ::std::mem::transmute(seg_id) };
      seg_id as u64
    });
    __bindgen_bitfield_unit.set(24usize, 1u8, {
      let split_inv: u32 = unsafe { ::std::mem::transmute(split_inv) };
      split_inv as u64
    });
    __bindgen_bitfield_unit.set(25usize, 1u8, {
      let is_alt: u32 = unsafe { ::std::mem::transmute(is_alt) };
      is_alt as u64
    });
    __bindgen_bitfield_unit.set(26usize, 1u8, {
      let strand_retained: u32 = unsafe { ::std::mem::transmute(strand_retained) };
      strand_retained as u64
    });
    __bindgen_bitfield_unit.set(27usize, 5u8, {
      let dummy: u32 = unsafe { ::std::mem::transmute(dummy) };
      dummy as u64
    });
    __bindgen_bitfield_unit
  }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idxopt_t {
  pub k: ::std::os::raw::c_short,
  pub w: ::std::os::raw::c_short,
  pub flag: ::std::os::raw::c_short,
  pub bucket_bits: ::std::os::raw::c_short,
  pub mini_batch_size: i64,
  pub batch_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_idxopt_t"][::std::mem::size_of::<mm_idxopt_t>() - 24usize];
  ["Alignment of mm_idxopt_t"][::std::mem::align_of::<mm_idxopt_t>() - 8usize];
  ["Offset of field: mm_idxopt_t::k"][::std::mem::offset_of!(mm_idxopt_t, k) - 0usize];
  ["Offset of field: mm_idxopt_t::w"][::std::mem::offset_of!(mm_idxopt_t, w) - 2usize];
  ["Offset of field: mm_idxopt_t::flag"][::std::mem::offset_of!(mm_idxopt_t, flag) - 4usize];
  ["Offset of field: mm_idxopt_t::bucket_bits"][::std::mem::offset_of!(mm_idxopt_t, bucket_bits) - 6usize];
  ["Offset of field: mm_idxopt_t::mini_batch_size"][::std::mem::offset_of!(mm_idxopt_t, mini_batch_size) - 8usize];
  ["Offset of field: mm_idxopt_t::batch_size"][::std::mem::offset_of!(mm_idxopt_t, batch_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_mapopt_t {
  pub flag: i64,
  pub seed: ::std::os::raw::c_int,
  pub sdust_thres: ::std::os::raw::c_int,
  pub max_qlen: ::std::os::raw::c_int,
  pub bw: ::std::os::raw::c_int,
  pub bw_long: ::std::os::raw::c_int,
  pub max_gap: ::std::os::raw::c_int,
  pub max_gap_ref: ::std::os::raw::c_int,
  pub max_frag_len: ::std::os::raw::c_int,
  pub max_chain_skip: ::std::os::raw::c_int,
  pub max_chain_iter: ::std::os::raw::c_int,
  pub min_cnt: ::std::os::raw::c_int,
  pub min_chain_score: ::std::os::raw::c_int,
  pub chain_gap_scale: f32,
  pub chain_skip_scale: f32,
  pub rmq_size_cap: ::std::os::raw::c_int,
  pub rmq_inner_dist: ::std::os::raw::c_int,
  pub rmq_rescue_size: ::std::os::raw::c_int,
  pub rmq_rescue_ratio: f32,
  pub mask_level: f32,
  pub mask_len: ::std::os::raw::c_int,
  pub pri_ratio: f32,
  pub best_n: ::std::os::raw::c_int,
  pub alt_drop: f32,
  pub a: ::std::os::raw::c_int,
  pub b: ::std::os::raw::c_int,
  pub q: ::std::os::raw::c_int,
  pub e: ::std::os::raw::c_int,
  pub q2: ::std::os::raw::c_int,
  pub e2: ::std::os::raw::c_int,
  pub sc_ambi: ::std::os::raw::c_int,
  pub noncan: ::std::os::raw::c_int,
  pub junc_bonus: ::std::os::raw::c_int,
  pub zdrop: ::std::os::raw::c_int,
  pub zdrop_inv: ::std::os::raw::c_int,
  pub end_bonus: ::std::os::raw::c_int,
  pub min_dp_max: ::std::os::raw::c_int,
  pub min_ksw_len: ::std::os::raw::c_int,
  pub anchor_ext_len: ::std::os::raw::c_int,
  pub anchor_ext_shift: ::std::os::raw::c_int,
  pub max_clip_ratio: f32,
  pub rank_min_len: ::std::os::raw::c_int,
  pub rank_frac: f32,
  pub pe_ori: ::std::os::raw::c_int,
  pub pe_bonus: ::std::os::raw::c_int,
  pub mid_occ_frac: f32,
  pub q_occ_frac: f32,
  pub min_mid_occ: i32,
  pub max_mid_occ: i32,
  pub mid_occ: i32,
  pub max_occ: i32,
  pub max_max_occ: i32,
  pub occ_dist: i32,
  pub mini_batch_size: i64,
  pub max_sw_mat: i64,
  pub cap_kalloc: i64,
  pub split_prefix: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_mapopt_t"][::std::mem::size_of::<mm_mapopt_t>() - 248usize];
  ["Alignment of mm_mapopt_t"][::std::mem::align_of::<mm_mapopt_t>() - 8usize];
  ["Offset of field: mm_mapopt_t::flag"][::std::mem::offset_of!(mm_mapopt_t, flag) - 0usize];
  ["Offset of field: mm_mapopt_t::seed"][::std::mem::offset_of!(mm_mapopt_t, seed) - 8usize];
  ["Offset of field: mm_mapopt_t::sdust_thres"][::std::mem::offset_of!(mm_mapopt_t, sdust_thres) - 12usize];
  ["Offset of field: mm_mapopt_t::max_qlen"][::std::mem::offset_of!(mm_mapopt_t, max_qlen) - 16usize];
  ["Offset of field: mm_mapopt_t::bw"][::std::mem::offset_of!(mm_mapopt_t, bw) - 20usize];
  ["Offset of field: mm_mapopt_t::bw_long"][::std::mem::offset_of!(mm_mapopt_t, bw_long) - 24usize];
  ["Offset of field: mm_mapopt_t::max_gap"][::std::mem::offset_of!(mm_mapopt_t, max_gap) - 28usize];
  ["Offset of field: mm_mapopt_t::max_gap_ref"][::std::mem::offset_of!(mm_mapopt_t, max_gap_ref) - 32usize];
  ["Offset of field: mm_mapopt_t::max_frag_len"][::std::mem::offset_of!(mm_mapopt_t, max_frag_len) - 36usize];
  ["Offset of field: mm_mapopt_t::max_chain_skip"][::std::mem::offset_of!(mm_mapopt_t, max_chain_skip) - 40usize];
  ["Offset of field: mm_mapopt_t::max_chain_iter"][::std::mem::offset_of!(mm_mapopt_t, max_chain_iter) - 44usize];
  ["Offset of field: mm_mapopt_t::min_cnt"][::std::mem::offset_of!(mm_mapopt_t, min_cnt) - 48usize];
  ["Offset of field: mm_mapopt_t::min_chain_score"][::std::mem::offset_of!(mm_mapopt_t, min_chain_score) - 52usize];
  ["Offset of field: mm_mapopt_t::chain_gap_scale"][::std::mem::offset_of!(mm_mapopt_t, chain_gap_scale) - 56usize];
  ["Offset of field: mm_mapopt_t::chain_skip_scale"][::std::mem::offset_of!(mm_mapopt_t, chain_skip_scale) - 60usize];
  ["Offset of field: mm_mapopt_t::rmq_size_cap"][::std::mem::offset_of!(mm_mapopt_t, rmq_size_cap) - 64usize];
  ["Offset of field: mm_mapopt_t::rmq_inner_dist"][::std::mem::offset_of!(mm_mapopt_t, rmq_inner_dist) - 68usize];
  ["Offset of field: mm_mapopt_t::rmq_rescue_size"][::std::mem::offset_of!(mm_mapopt_t, rmq_rescue_size) - 72usize];
  ["Offset of field: mm_mapopt_t::rmq_rescue_ratio"][::std::mem::offset_of!(mm_mapopt_t, rmq_rescue_ratio) - 76usize];
  ["Offset of field: mm_mapopt_t::mask_level"][::std::mem::offset_of!(mm_mapopt_t, mask_level) - 80usize];
  ["Offset of field: mm_mapopt_t::mask_len"][::std::mem::offset_of!(mm_mapopt_t, mask_len) - 84usize];
  ["Offset of field: mm_mapopt_t::pri_ratio"][::std::mem::offset_of!(mm_mapopt_t, pri_ratio) - 88usize];
  ["Offset of field: mm_mapopt_t::best_n"][::std::mem::offset_of!(mm_mapopt_t, best_n) - 92usize];
  ["Offset of field: mm_mapopt_t::alt_drop"][::std::mem::offset_of!(mm_mapopt_t, alt_drop) - 96usize];
  ["Offset of field: mm_mapopt_t::a"][::std::mem::offset_of!(mm_mapopt_t, a) - 100usize];
  ["Offset of field: mm_mapopt_t::b"][::std::mem::offset_of!(mm_mapopt_t, b) - 104usize];
  ["Offset of field: mm_mapopt_t::q"][::std::mem::offset_of!(mm_mapopt_t, q) - 108usize];
  ["Offset of field: mm_mapopt_t::e"][::std::mem::offset_of!(mm_mapopt_t, e) - 112usize];
  ["Offset of field: mm_mapopt_t::q2"][::std::mem::offset_of!(mm_mapopt_t, q2) - 116usize];
  ["Offset of field: mm_mapopt_t::e2"][::std::mem::offset_of!(mm_mapopt_t, e2) - 120usize];
  ["Offset of field: mm_mapopt_t::sc_ambi"][::std::mem::offset_of!(mm_mapopt_t, sc_ambi) - 124usize];
  ["Offset of field: mm_mapopt_t::noncan"][::std::mem::offset_of!(mm_mapopt_t, noncan) - 128usize];
  ["Offset of field: mm_mapopt_t::junc_bonus"][::std::mem::offset_of!(mm_mapopt_t, junc_bonus) - 132usize];
  ["Offset of field: mm_mapopt_t::zdrop"][::std::mem::offset_of!(mm_mapopt_t, zdrop) - 136usize];
  ["Offset of field: mm_mapopt_t::zdrop_inv"][::std::mem::offset_of!(mm_mapopt_t, zdrop_inv) - 140usize];
  ["Offset of field: mm_mapopt_t::end_bonus"][::std::mem::offset_of!(mm_mapopt_t, end_bonus) - 144usize];
  ["Offset of field: mm_mapopt_t::min_dp_max"][::std::mem::offset_of!(mm_mapopt_t, min_dp_max) - 148usize];
  ["Offset of field: mm_mapopt_t::min_ksw_len"][::std::mem::offset_of!(mm_mapopt_t, min_ksw_len) - 152usize];
  ["Offset of field: mm_mapopt_t::anchor_ext_len"][::std::mem::offset_of!(mm_mapopt_t, anchor_ext_len) - 156usize];
  ["Offset of field: mm_mapopt_t::anchor_ext_shift"][::std::mem::offset_of!(mm_mapopt_t, anchor_ext_shift) - 160usize];
  ["Offset of field: mm_mapopt_t::max_clip_ratio"][::std::mem::offset_of!(mm_mapopt_t, max_clip_ratio) - 164usize];
  ["Offset of field: mm_mapopt_t::rank_min_len"][::std::mem::offset_of!(mm_mapopt_t, rank_min_len) - 168usize];
  ["Offset of field: mm_mapopt_t::rank_frac"][::std::mem::offset_of!(mm_mapopt_t, rank_frac) - 172usize];
  ["Offset of field: mm_mapopt_t::pe_ori"][::std::mem::offset_of!(mm_mapopt_t, pe_ori) - 176usize];
  ["Offset of field: mm_mapopt_t::pe_bonus"][::std::mem::offset_of!(mm_mapopt_t, pe_bonus) - 180usize];
  ["Offset of field: mm_mapopt_t::mid_occ_frac"][::std::mem::offset_of!(mm_mapopt_t, mid_occ_frac) - 184usize];
  ["Offset of field: mm_mapopt_t::q_occ_frac"][::std::mem::offset_of!(mm_mapopt_t, q_occ_frac) - 188usize];
  ["Offset of field: mm_mapopt_t::min_mid_occ"][::std::mem::offset_of!(mm_mapopt_t, min_mid_occ) - 192usize];
  ["Offset of field: mm_mapopt_t::max_mid_occ"][::std::mem::offset_of!(mm_mapopt_t, max_mid_occ) - 196usize];
  ["Offset of field: mm_mapopt_t::mid_occ"][::std::mem::offset_of!(mm_mapopt_t, mid_occ) - 200usize];
  ["Offset of field: mm_mapopt_t::max_occ"][::std::mem::offset_of!(mm_mapopt_t, max_occ) - 204usize];
  ["Offset of field: mm_mapopt_t::max_max_occ"][::std::mem::offset_of!(mm_mapopt_t, max_max_occ) - 208usize];
  ["Offset of field: mm_mapopt_t::occ_dist"][::std::mem::offset_of!(mm_mapopt_t, occ_dist) - 212usize];
  ["Offset of field: mm_mapopt_t::mini_batch_size"][::std::mem::offset_of!(mm_mapopt_t, mini_batch_size) - 216usize];
  ["Offset of field: mm_mapopt_t::max_sw_mat"][::std::mem::offset_of!(mm_mapopt_t, max_sw_mat) - 224usize];
  ["Offset of field: mm_mapopt_t::cap_kalloc"][::std::mem::offset_of!(mm_mapopt_t, cap_kalloc) - 232usize];
  ["Offset of field: mm_mapopt_t::split_prefix"][::std::mem::offset_of!(mm_mapopt_t, split_prefix) - 240usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_idx_reader_t {
  pub is_idx: ::std::os::raw::c_int,
  pub n_parts: ::std::os::raw::c_int,
  pub idx_size: i64,
  pub opt: mm_idxopt_t,
  pub fp_out: *mut FILE,
  pub fp: mm_idx_reader_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mm_idx_reader_t__bindgen_ty_1 {
  pub seq: *mut mm_bseq_file_s,
  pub idx: *mut FILE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_idx_reader_t__bindgen_ty_1"][::std::mem::size_of::<mm_idx_reader_t__bindgen_ty_1>() - 8usize];
  ["Alignment of mm_idx_reader_t__bindgen_ty_1"][::std::mem::align_of::<mm_idx_reader_t__bindgen_ty_1>() - 8usize];
  ["Offset of field: mm_idx_reader_t__bindgen_ty_1::seq"]
    [::std::mem::offset_of!(mm_idx_reader_t__bindgen_ty_1, seq) - 0usize];
  ["Offset of field: mm_idx_reader_t__bindgen_ty_1::idx"]
    [::std::mem::offset_of!(mm_idx_reader_t__bindgen_ty_1, idx) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_idx_reader_t"][::std::mem::size_of::<mm_idx_reader_t>() - 56usize];
  ["Alignment of mm_idx_reader_t"][::std::mem::align_of::<mm_idx_reader_t>() - 8usize];
  ["Offset of field: mm_idx_reader_t::is_idx"][::std::mem::offset_of!(mm_idx_reader_t, is_idx) - 0usize];
  ["Offset of field: mm_idx_reader_t::n_parts"][::std::mem::offset_of!(mm_idx_reader_t, n_parts) - 4usize];
  ["Offset of field: mm_idx_reader_t::idx_size"][::std::mem::offset_of!(mm_idx_reader_t, idx_size) - 8usize];
  ["Offset of field: mm_idx_reader_t::opt"][::std::mem::offset_of!(mm_idx_reader_t, opt) - 16usize];
  ["Offset of field: mm_idx_reader_t::fp_out"][::std::mem::offset_of!(mm_idx_reader_t, fp_out) - 40usize];
  ["Offset of field: mm_idx_reader_t::fp"][::std::mem::offset_of!(mm_idx_reader_t, fp) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_tbuf_s {
  pub km: *mut ::std::os::raw::c_void,
  pub rep_len: ::std::os::raw::c_int,
  pub frag_gap: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_tbuf_s"][::std::mem::size_of::<mm_tbuf_s>() - 16usize];
  ["Alignment of mm_tbuf_s"][::std::mem::align_of::<mm_tbuf_s>() - 8usize];
  ["Offset of field: mm_tbuf_s::km"][::std::mem::offset_of!(mm_tbuf_s, km) - 0usize];
  ["Offset of field: mm_tbuf_s::rep_len"][::std::mem::offset_of!(mm_tbuf_s, rep_len) - 8usize];
  ["Offset of field: mm_tbuf_s::frag_gap"][::std::mem::offset_of!(mm_tbuf_s, frag_gap) - 12usize];
};
pub type mm_tbuf_t = mm_tbuf_s;
extern "C" {
  pub static mut mm_verbose: ::std::os::raw::c_int;
}
extern "C" {
  pub static mut mm_dbg_flag: ::std::os::raw::c_int;
}
extern "C" {
  pub static mut mm_realtime0: f64;
}
extern "C" {
  #[doc = " Set default or preset parameters\n\n @param preset     NULL to set all parameters as default; otherwise apply preset to affected parameters\n @param io         pointer to indexing parameters\n @param mo         pointer to mapping parameters\n\n @return 0 if success; -1 if _present_ unknown"]
  pub fn mm_set_opt(
    preset: *const ::std::os::raw::c_char,
    io: *mut mm_idxopt_t,
    mo: *mut mm_mapopt_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_check_opt(io: *const mm_idxopt_t, mo: *const mm_mapopt_t) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = " Update mm_mapopt_t::mid_occ via mm_mapopt_t::mid_occ_frac\n\n If mm_mapopt_t::mid_occ is 0, this function sets it to a number such that no\n more than mm_mapopt_t::mid_occ_frac of minimizers in the index have a higher\n occurrence.\n\n @param opt        mapping parameters\n @param mi         minimap2 index"]
  pub fn mm_mapopt_update(opt: *mut mm_mapopt_t, mi: *const mm_idx_t);
}
extern "C" {
  pub fn mm_mapopt_max_intron_len(opt: *mut mm_mapopt_t, max_intron_len: ::std::os::raw::c_int);
}
extern "C" {
  #[doc = " Initialize an index reader\n\n @param fn         index or fasta/fastq file name (this function tests the file type)\n @param opt        indexing parameters\n @param fn_out     if not NULL, write built index to this file\n\n @return an index reader on success; NULL if fail to open _fn_"]
  pub fn mm_idx_reader_open(
    fn_: *const ::std::os::raw::c_char,
    opt: *const mm_idxopt_t,
    fn_out: *const ::std::os::raw::c_char,
  ) -> *mut mm_idx_reader_t;
}
extern "C" {
  #[doc = " Read/build an index\n\n If the input file is an index file, this function reads one part of the\n index and returns. If the input file is a sequence file (fasta or fastq),\n this function constructs the index for about mm_idxopt_t::batch_size bases.\n Importantly, for a huge collection of sequences, this function may only\n return an index for part of sequences. It needs to be repeatedly called\n to traverse the entire index/sequence file.\n\n @param r          index reader\n @param n_threads  number of threads for constructing index\n\n @return an index on success; NULL if reaching the end of the input file"]
  pub fn mm_idx_reader_read(r: *mut mm_idx_reader_t, n_threads: ::std::os::raw::c_int) -> *mut mm_idx_t;
}
extern "C" {
  #[doc = " Destroy/deallocate an index reader\n\n @param r          index reader"]
  pub fn mm_idx_reader_close(r: *mut mm_idx_reader_t);
}
extern "C" {
  pub fn mm_idx_reader_eof(r: *const mm_idx_reader_t) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = " Check whether the file contains a minimap2 index\n\n @param fn         file name\n\n @return the file size if fn is an index file; 0 if fn is not."]
  pub fn mm_idx_is_idx(fn_: *const ::std::os::raw::c_char) -> i64;
}
extern "C" {
  #[doc = " Load a part of an index\n\n Given a uni-part index, this function loads the entire index into memory.\n Given a multi-part index, it loads one part only and places the file pointer\n at the end of that part.\n\n @param fp         pointer to FILE object\n\n @return minimap2 index read from fp"]
  pub fn mm_idx_load(fp: *mut FILE) -> *mut mm_idx_t;
}
extern "C" {
  #[doc = " Append an index (or one part of a full index) to file\n\n @param fp         pointer to FILE object\n @param mi         minimap2 index"]
  pub fn mm_idx_dump(fp: *mut FILE, mi: *const mm_idx_t);
}
extern "C" {
  #[doc = " Create an index from strings in memory\n\n @param w            minimizer window size\n @param k            minimizer k-mer size\n @param is_hpc       use HPC k-mer if true\n @param bucket_bits  number of bits for the first level of the hash table\n @param n            number of sequences\n @param seq          sequences in A/C/G/T\n @param name         sequence names; could be NULL\n\n @return minimap2 index"]
  pub fn mm_idx_str(
    w: ::std::os::raw::c_int,
    k: ::std::os::raw::c_int,
    is_hpc: ::std::os::raw::c_int,
    bucket_bits: ::std::os::raw::c_int,
    n: ::std::os::raw::c_int,
    seq: *mut *const ::std::os::raw::c_char,
    name: *mut *const ::std::os::raw::c_char,
  ) -> *mut mm_idx_t;
}
extern "C" {
  #[doc = " Print index statistics to stderr\n\n @param mi         minimap2 index"]
  pub fn mm_idx_stat(idx: *const mm_idx_t);
}
extern "C" {
  #[doc = " Destroy/deallocate an index\n\n @param r          minimap2 index"]
  pub fn mm_idx_destroy(mi: *mut mm_idx_t);
}
extern "C" {
  #[doc = " Initialize a thread-local buffer for mapping\n\n Each mapping thread requires a buffer specific to the thread (see mm_map()\n below). The primary purpose of this buffer is to reduce frequent heap\n allocations across threads. A buffer shall not be used by two or more\n threads.\n\n @return pointer to a thread-local buffer"]
  pub fn mm_tbuf_init() -> *mut mm_tbuf_t;
}
extern "C" {
  #[doc = " Destroy/deallocate a thread-local buffer for mapping\n\n @param b          the buffer"]
  pub fn mm_tbuf_destroy(b: *mut mm_tbuf_t);
}
extern "C" {
  pub fn mm_tbuf_get_km(b: *mut mm_tbuf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  #[doc = " Align a query sequence against an index\n\n This function possibly finds multiple alignments of the query sequence.\n The returned array and the mm_reg1_t::p field of each element are allocated\n with malloc().\n\n @param mi         minimap2 index\n @param l_seq      length of the query sequence\n @param seq        the query sequence\n @param n_regs     number of hits (out)\n @param b          thread-local buffer; two mm_map() calls shall not use one buffer at the same time!\n @param opt        mapping parameters\n @param name       query name, used for all-vs-all overlapping and debugging\n\n @return an array of hits which need to be deallocated with free() together\n         with mm_reg1_t::p of each element. The size is written to _n_regs_."]
  pub fn mm_map(
    mi: *const mm_idx_t,
    l_seq: ::std::os::raw::c_int,
    seq: *const ::std::os::raw::c_char,
    n_regs: *mut ::std::os::raw::c_int,
    b: *mut mm_tbuf_t,
    opt: *const mm_mapopt_t,
    name: *const ::std::os::raw::c_char,
  ) -> *mut mm_reg1_t;
}
extern "C" {
  pub fn mm_map_frag(
    mi: *const mm_idx_t,
    n_segs: ::std::os::raw::c_int,
    qlens: *const ::std::os::raw::c_int,
    seqs: *mut *const ::std::os::raw::c_char,
    n_regs: *mut ::std::os::raw::c_int,
    regs: *mut *mut mm_reg1_t,
    b: *mut mm_tbuf_t,
    opt: *const mm_mapopt_t,
    qname: *const ::std::os::raw::c_char,
  );
}
extern "C" {
  #[doc = " Align a fasta/fastq file and print alignments to stdout\n\n @param idx        minimap2 index\n @param fn         fasta/fastq file name\n @param opt        mapping parameters\n @param n_threads  number of threads\n\n @return 0 on success; -1 if _fn_ can't be read"]
  pub fn mm_map_file(
    idx: *const mm_idx_t,
    fn_: *const ::std::os::raw::c_char,
    opt: *const mm_mapopt_t,
    n_threads: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_map_file_frag(
    idx: *const mm_idx_t,
    n_segs: ::std::os::raw::c_int,
    fn_: *mut *const ::std::os::raw::c_char,
    opt: *const mm_mapopt_t,
    n_threads: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[doc = " Generate the cs tag (new in 2.12)\n\n @param km         memory blocks; set to NULL if unsure\n @param buf        buffer to write the cs/MD tag; typicall NULL on the first call\n @param max_len    max length of the buffer; typically set to 0 on the first call\n @param mi         index\n @param r          alignment\n @param seq        query sequence\n @param no_iden    true to use : instead of =\n\n @return the length of cs"]
  pub fn mm_gen_cs(
    km: *mut ::std::os::raw::c_void,
    buf: *mut *mut ::std::os::raw::c_char,
    max_len: *mut ::std::os::raw::c_int,
    mi: *const mm_idx_t,
    r: *const mm_reg1_t,
    seq: *const ::std::os::raw::c_char,
    no_iden: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_gen_MD(
    km: *mut ::std::os::raw::c_void,
    buf: *mut *mut ::std::os::raw::c_char,
    max_len: *mut ::std::os::raw::c_int,
    mi: *const mm_idx_t,
    r: *const mm_reg1_t,
    seq: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_index_name(mi: *mut mm_idx_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_name2id(mi: *const mm_idx_t, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_getseq(mi: *const mm_idx_t, rid: u32, st: u32, en: u32, seq: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_alt_read(mi: *mut mm_idx_t, fn_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_bed_read(
    mi: *mut mm_idx_t,
    fn_: *const ::std::os::raw::c_char,
    read_junc: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_idx_bed_junc(mi: *const mm_idx_t, ctg: i32, st: i32, en: i32, s: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_mapopt_init(opt: *mut mm_mapopt_t);
}
extern "C" {
  pub fn mm_idx_build(
    fn_: *const ::std::os::raw::c_char,
    w: ::std::os::raw::c_int,
    k: ::std::os::raw::c_int,
    flag: ::std::os::raw::c_int,
    n_threads: ::std::os::raw::c_int,
  ) -> *mut mm_idx_t;
}
extern "C" {
  pub fn memchr(
    __s: *const ::std::os::raw::c_void,
    __c: ::std::os::raw::c_int,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memcmp(
    __s1: *const ::std::os::raw::c_void,
    __s2: *const ::std::os::raw::c_void,
    __n: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn memcpy(
    __dst: *mut ::std::os::raw::c_void,
    __src: *const ::std::os::raw::c_void,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memmove(
    __dst: *mut ::std::os::raw::c_void,
    __src: *const ::std::os::raw::c_void,
    __len: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memset(
    __b: *mut ::std::os::raw::c_void,
    __c: ::std::os::raw::c_int,
    __len: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn strcat(__s1: *mut ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strcmp(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcoll(__s1: *const ::std::os::raw::c_char, __s2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcpy(
    __dst: *mut ::std::os::raw::c_char,
    __src: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strcspn(
    __s: *const ::std::os::raw::c_char,
    __charset: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strncat(
    __s1: *mut ::std::os::raw::c_char,
    __s2: *const ::std::os::raw::c_char,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strncmp(
    __s1: *const ::std::os::raw::c_char,
    __s2: *const ::std::os::raw::c_char,
    __n: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strncpy(
    __dst: *mut ::std::os::raw::c_char,
    __src: *const ::std::os::raw::c_char,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strpbrk(
    __s: *const ::std::os::raw::c_char,
    __charset: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strrchr(__s: *const ::std::os::raw::c_char, __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strspn(
    __s: *const ::std::os::raw::c_char,
    __charset: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strstr(
    __big: *const ::std::os::raw::c_char,
    __little: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strtok(
    __str: *mut ::std::os::raw::c_char,
    __sep: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strxfrm(
    __s1: *mut ::std::os::raw::c_char,
    __s2: *const ::std::os::raw::c_char,
    __n: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strtok_r(
    __str: *mut ::std::os::raw::c_char,
    __sep: *const ::std::os::raw::c_char,
    __lasts: *mut *mut ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strerror_r(
    __errnum: ::std::os::raw::c_int,
    __strerrbuf: *mut ::std::os::raw::c_char,
    __buflen: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn memccpy(
    __dst: *mut ::std::os::raw::c_void,
    __src: *const ::std::os::raw::c_void,
    __c: ::std::os::raw::c_int,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn stpcpy(
    __dst: *mut ::std::os::raw::c_char,
    __src: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn stpncpy(
    __dst: *mut ::std::os::raw::c_char,
    __src: *const ::std::os::raw::c_char,
    __n: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
  pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn memset_s(
    __s: *mut ::std::os::raw::c_void,
    __smax: rsize_t,
    __c: ::std::os::raw::c_int,
    __n: rsize_t,
  ) -> errno_t;
}
extern "C" {
  pub fn memmem(
    __big: *const ::std::os::raw::c_void,
    __big_len: usize,
    __little: *const ::std::os::raw::c_void,
    __little_len: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memset_pattern4(__b: *mut ::std::os::raw::c_void, __pattern4: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
  pub fn memset_pattern8(__b: *mut ::std::os::raw::c_void, __pattern8: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
  pub fn memset_pattern16(__b: *mut ::std::os::raw::c_void, __pattern16: *const ::std::os::raw::c_void, __len: usize);
}
extern "C" {
  pub fn strcasestr(
    __big: *const ::std::os::raw::c_char,
    __little: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strnstr(
    __big: *const ::std::os::raw::c_char,
    __little: *const ::std::os::raw::c_char,
    __len: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strlcat(
    __dst: *mut ::std::os::raw::c_char,
    __source: *const ::std::os::raw::c_char,
    __size: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strlcpy(
    __dst: *mut ::std::os::raw::c_char,
    __source: *const ::std::os::raw::c_char,
    __size: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn strsep(
    __stringp: *mut *mut ::std::os::raw::c_char,
    __delim: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn swab(arg1: *const ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void, arg3: isize);
}
extern "C" {
  pub fn timingsafe_bcmp(
    __b1: *const ::std::os::raw::c_void,
    __b2: *const ::std::os::raw::c_void,
    __len: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strsignal_r(
    __sig: ::std::os::raw::c_int,
    __strsignalbuf: *mut ::std::os::raw::c_char,
    __buflen: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn bcmp(
    arg1: *const ::std::os::raw::c_void,
    arg2: *const ::std::os::raw::c_void,
    arg3: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn bcopy(arg1: *const ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn index(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn rindex(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcasecmp(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strncasecmp(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_bseq_file_s {
  _unused: [u8; 0],
}
pub type mm_bseq_file_t = mm_bseq_file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_bseq1_t {
  pub l_seq: ::std::os::raw::c_int,
  pub rid: ::std::os::raw::c_int,
  pub name: *mut ::std::os::raw::c_char,
  pub seq: *mut ::std::os::raw::c_char,
  pub qual: *mut ::std::os::raw::c_char,
  pub comment: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_bseq1_t"][::std::mem::size_of::<mm_bseq1_t>() - 40usize];
  ["Alignment of mm_bseq1_t"][::std::mem::align_of::<mm_bseq1_t>() - 8usize];
  ["Offset of field: mm_bseq1_t::l_seq"][::std::mem::offset_of!(mm_bseq1_t, l_seq) - 0usize];
  ["Offset of field: mm_bseq1_t::rid"][::std::mem::offset_of!(mm_bseq1_t, rid) - 4usize];
  ["Offset of field: mm_bseq1_t::name"][::std::mem::offset_of!(mm_bseq1_t, name) - 8usize];
  ["Offset of field: mm_bseq1_t::seq"][::std::mem::offset_of!(mm_bseq1_t, seq) - 16usize];
  ["Offset of field: mm_bseq1_t::qual"][::std::mem::offset_of!(mm_bseq1_t, qual) - 24usize];
  ["Offset of field: mm_bseq1_t::comment"][::std::mem::offset_of!(mm_bseq1_t, comment) - 32usize];
};
extern "C" {
  pub fn mm_bseq_open(fn_: *const ::std::os::raw::c_char) -> *mut mm_bseq_file_t;
}
extern "C" {
  pub fn mm_bseq_close(fp: *mut mm_bseq_file_t);
}
extern "C" {
  pub fn mm_bseq_read3(
    fp: *mut mm_bseq_file_t,
    chunk_size: i64,
    with_qual: ::std::os::raw::c_int,
    with_comment: ::std::os::raw::c_int,
    frag_mode: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
  ) -> *mut mm_bseq1_t;
}
extern "C" {
  pub fn mm_bseq_read2(
    fp: *mut mm_bseq_file_t,
    chunk_size: i64,
    with_qual: ::std::os::raw::c_int,
    frag_mode: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
  ) -> *mut mm_bseq1_t;
}
extern "C" {
  pub fn mm_bseq_read(
    fp: *mut mm_bseq_file_t,
    chunk_size: i64,
    with_qual: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
  ) -> *mut mm_bseq1_t;
}
extern "C" {
  pub fn mm_bseq_read_frag2(
    n_fp: ::std::os::raw::c_int,
    fp: *mut *mut mm_bseq_file_t,
    chunk_size: i64,
    with_qual: ::std::os::raw::c_int,
    with_comment: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
  ) -> *mut mm_bseq1_t;
}
extern "C" {
  pub fn mm_bseq_read_frag(
    n_fp: ::std::os::raw::c_int,
    fp: *mut *mut mm_bseq_file_t,
    chunk_size: i64,
    with_qual: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
  ) -> *mut mm_bseq1_t;
}
extern "C" {
  pub fn mm_bseq_eof(fp: *mut mm_bseq_file_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub static mut seq_nt4_table: [::std::os::raw::c_uchar; 256usize];
}
extern "C" {
  pub static mut seq_comp_table: [::std::os::raw::c_uchar; 256usize];
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
  pub __exception: __uint32_t,
  pub __fsr: __uint32_t,
  pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_exception_state"][::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
  ["Alignment of __darwin_arm_exception_state"][::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
  ["Offset of field: __darwin_arm_exception_state::__exception"]
    [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
  ["Offset of field: __darwin_arm_exception_state::__fsr"]
    [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
  ["Offset of field: __darwin_arm_exception_state::__far"]
    [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
  pub __far: __uint64_t,
  pub __esr: __uint32_t,
  pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_exception_state64"][::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
  ["Alignment of __darwin_arm_exception_state64"][::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
  ["Offset of field: __darwin_arm_exception_state64::__far"]
    [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
  ["Offset of field: __darwin_arm_exception_state64::__esr"]
    [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
  ["Offset of field: __darwin_arm_exception_state64::__exception"]
    [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
  pub __r: [__uint32_t; 13usize],
  pub __sp: __uint32_t,
  pub __lr: __uint32_t,
  pub __pc: __uint32_t,
  pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_thread_state"][::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
  ["Alignment of __darwin_arm_thread_state"][::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
  ["Offset of field: __darwin_arm_thread_state::__r"][::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
  ["Offset of field: __darwin_arm_thread_state::__sp"]
    [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
  ["Offset of field: __darwin_arm_thread_state::__lr"]
    [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
  ["Offset of field: __darwin_arm_thread_state::__pc"]
    [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
  ["Offset of field: __darwin_arm_thread_state::__cpsr"]
    [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
  pub __x: [__uint64_t; 29usize],
  pub __fp: __uint64_t,
  pub __lr: __uint64_t,
  pub __sp: __uint64_t,
  pub __pc: __uint64_t,
  pub __cpsr: __uint32_t,
  pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_thread_state64"][::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
  ["Alignment of __darwin_arm_thread_state64"][::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
  ["Offset of field: __darwin_arm_thread_state64::__x"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
  ["Offset of field: __darwin_arm_thread_state64::__fp"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
  ["Offset of field: __darwin_arm_thread_state64::__lr"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
  ["Offset of field: __darwin_arm_thread_state64::__sp"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
  ["Offset of field: __darwin_arm_thread_state64::__pc"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
  ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
  ["Offset of field: __darwin_arm_thread_state64::__pad"]
    [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
  pub __r: [__uint32_t; 64usize],
  pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
  ["Alignment of __darwin_arm_vfp_state"][::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
  ["Offset of field: __darwin_arm_vfp_state::__r"][::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
  ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
    [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
  pub __v: [__uint128_t; 32usize],
  pub __fpsr: __uint32_t,
  pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_neon_state64"][::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
  ["Alignment of __darwin_arm_neon_state64"][::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
  ["Offset of field: __darwin_arm_neon_state64::__v"][::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
  ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
    [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
  ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
    [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
  pub __v: [__uint128_t; 16usize],
  pub __fpsr: __uint32_t,
  pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_neon_state"][::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
  ["Alignment of __darwin_arm_neon_state"][::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
  ["Offset of field: __darwin_arm_neon_state::__v"][::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
  ["Offset of field: __darwin_arm_neon_state::__fpsr"]
    [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
  ["Offset of field: __darwin_arm_neon_state::__fpcr"]
    [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_amx_state_v1 {
  pub __x: [[__uint8_t; 64usize]; 8usize],
  pub __y: [[__uint8_t; 64usize]; 8usize],
  pub __z: [[__uint8_t; 64usize]; 64usize],
  pub __amx_state_t_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_amx_state_v1"][::std::mem::size_of::<__darwin_arm_amx_state_v1>() - 5184usize];
  ["Alignment of __darwin_arm_amx_state_v1"][::std::mem::align_of::<__darwin_arm_amx_state_v1>() - 64usize];
  ["Offset of field: __darwin_arm_amx_state_v1::__x"][::std::mem::offset_of!(__darwin_arm_amx_state_v1, __x) - 0usize];
  ["Offset of field: __darwin_arm_amx_state_v1::__y"]
    [::std::mem::offset_of!(__darwin_arm_amx_state_v1, __y) - 512usize];
  ["Offset of field: __darwin_arm_amx_state_v1::__z"]
    [::std::mem::offset_of!(__darwin_arm_amx_state_v1, __z) - 1024usize];
  ["Offset of field: __darwin_arm_amx_state_v1::__amx_state_t_el1"]
    [::std::mem::offset_of!(__darwin_arm_amx_state_v1, __amx_state_t_el1) - 5120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
  pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
  ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
  ["Offset of field: __arm_pagein_state::__pagein_error"]
    [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
  pub __bvr: [__uint32_t; 16usize],
  pub __bcr: [__uint32_t; 16usize],
  pub __wvr: [__uint32_t; 16usize],
  pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __arm_legacy_debug_state"][::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
  ["Alignment of __arm_legacy_debug_state"][::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
  ["Offset of field: __arm_legacy_debug_state::__bvr"]
    [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
  ["Offset of field: __arm_legacy_debug_state::__bcr"]
    [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
  ["Offset of field: __arm_legacy_debug_state::__wvr"]
    [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
  ["Offset of field: __arm_legacy_debug_state::__wcr"]
    [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
  pub __bvr: [__uint32_t; 16usize],
  pub __bcr: [__uint32_t; 16usize],
  pub __wvr: [__uint32_t; 16usize],
  pub __wcr: [__uint32_t; 16usize],
  pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_debug_state32"][::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
  ["Alignment of __darwin_arm_debug_state32"][::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
  ["Offset of field: __darwin_arm_debug_state32::__bvr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
  ["Offset of field: __darwin_arm_debug_state32::__bcr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
  ["Offset of field: __darwin_arm_debug_state32::__wvr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
  ["Offset of field: __darwin_arm_debug_state32::__wcr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
  ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
    [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
  pub __bvr: [__uint64_t; 16usize],
  pub __bcr: [__uint64_t; 16usize],
  pub __wvr: [__uint64_t; 16usize],
  pub __wcr: [__uint64_t; 16usize],
  pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_debug_state64"][::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
  ["Alignment of __darwin_arm_debug_state64"][::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
  ["Offset of field: __darwin_arm_debug_state64::__bvr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
  ["Offset of field: __darwin_arm_debug_state64::__bcr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
  ["Offset of field: __darwin_arm_debug_state64::__wvr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
  ["Offset of field: __darwin_arm_debug_state64::__wcr"]
    [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
  ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
    [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
  pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_arm_cpmu_state64"][::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
  ["Alignment of __darwin_arm_cpmu_state64"][::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
  ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
    [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
  pub __es: __darwin_arm_exception_state,
  pub __ss: __darwin_arm_thread_state,
  pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
  ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
  ["Offset of field: __darwin_mcontext32::__es"][::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
  ["Offset of field: __darwin_mcontext32::__ss"][::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
  ["Offset of field: __darwin_mcontext32::__fs"][::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
  pub __es: __darwin_arm_exception_state64,
  pub __ss: __darwin_arm_thread_state64,
  pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
  ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
  ["Offset of field: __darwin_mcontext64::__es"][::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
  ["Offset of field: __darwin_mcontext64::__ss"][::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
  ["Offset of field: __darwin_mcontext64::__ns"][::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
  pub ss_sp: *mut ::std::os::raw::c_void,
  pub ss_size: __darwin_size_t,
  pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
  ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
  ["Offset of field: __darwin_sigaltstack::ss_sp"][::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
  ["Offset of field: __darwin_sigaltstack::ss_size"][::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
  ["Offset of field: __darwin_sigaltstack::ss_flags"][::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
  pub uc_onstack: ::std::os::raw::c_int,
  pub uc_sigmask: __darwin_sigset_t,
  pub uc_stack: __darwin_sigaltstack,
  pub uc_link: *mut __darwin_ucontext,
  pub uc_mcsize: __darwin_size_t,
  pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
  ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
  ["Offset of field: __darwin_ucontext::uc_onstack"][::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
  ["Offset of field: __darwin_ucontext::uc_sigmask"][::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
  ["Offset of field: __darwin_ucontext::uc_stack"][::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
  ["Offset of field: __darwin_ucontext::uc_link"][::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
  ["Offset of field: __darwin_ucontext::uc_mcsize"][::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
  ["Offset of field: __darwin_ucontext::uc_mcontext"][::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
  pub sival_int: ::std::os::raw::c_int,
  pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
  ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
  ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
  ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
  pub sigev_notify: ::std::os::raw::c_int,
  pub sigev_signo: ::std::os::raw::c_int,
  pub sigev_value: sigval,
  pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
  pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
  ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
  ["Offset of field: sigevent::sigev_notify"][::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
  ["Offset of field: sigevent::sigev_signo"][::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
  ["Offset of field: sigevent::sigev_value"][::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
  ["Offset of field: sigevent::sigev_notify_function"]
    [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
  ["Offset of field: sigevent::sigev_notify_attributes"]
    [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
  pub si_signo: ::std::os::raw::c_int,
  pub si_errno: ::std::os::raw::c_int,
  pub si_code: ::std::os::raw::c_int,
  pub si_pid: pid_t,
  pub si_uid: uid_t,
  pub si_status: ::std::os::raw::c_int,
  pub si_addr: *mut ::std::os::raw::c_void,
  pub si_value: sigval,
  pub si_band: ::std::os::raw::c_long,
  pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
  ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
  ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
  ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
  ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
  ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
  ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
  ["Offset of field: __siginfo::si_status"][::std::mem::offset_of!(__siginfo, si_status) - 20usize];
  ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
  ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
  ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
  ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
  pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
  pub __sa_sigaction: ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut __siginfo, arg3: *mut ::std::os::raw::c_void),
  >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
  ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
  ["Offset of field: __sigaction_u::__sa_handler"][::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
  ["Offset of field: __sigaction_u::__sa_sigaction"][::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
  pub __sigaction_u: __sigaction_u,
  pub sa_tramp: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *mut ::std::os::raw::c_void,
      arg2: ::std::os::raw::c_int,
      arg3: ::std::os::raw::c_int,
      arg4: *mut siginfo_t,
      arg5: *mut ::std::os::raw::c_void,
    ),
  >,
  pub sa_mask: sigset_t,
  pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
  ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
  ["Offset of field: __sigaction::__sigaction_u"][::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
  ["Offset of field: __sigaction::sa_tramp"][::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
  ["Offset of field: __sigaction::sa_mask"][::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
  ["Offset of field: __sigaction::sa_flags"][::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
  pub __sigaction_u: __sigaction_u,
  pub sa_mask: sigset_t,
  pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
  ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
  ["Offset of field: sigaction::__sigaction_u"][::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
  ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
  ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
  pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
  pub sv_mask: ::std::os::raw::c_int,
  pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
  ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
  ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
  ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
  ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
  pub ss_sp: *mut ::std::os::raw::c_char,
  pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
  ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
  ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
  ["Offset of field: sigstack::ss_onstack"][::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
extern "C" {
  pub fn signal(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
  ) -> ::std::option::Option<
    unsafe extern "C" fn(
      arg1: ::std::os::raw::c_int,
      arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ),
  >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
  pub tv_sec: __darwin_time_t,
  pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
  ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
  ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
  ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
  pub ru_utime: timeval,
  pub ru_stime: timeval,
  pub ru_maxrss: ::std::os::raw::c_long,
  pub ru_ixrss: ::std::os::raw::c_long,
  pub ru_idrss: ::std::os::raw::c_long,
  pub ru_isrss: ::std::os::raw::c_long,
  pub ru_minflt: ::std::os::raw::c_long,
  pub ru_majflt: ::std::os::raw::c_long,
  pub ru_nswap: ::std::os::raw::c_long,
  pub ru_inblock: ::std::os::raw::c_long,
  pub ru_oublock: ::std::os::raw::c_long,
  pub ru_msgsnd: ::std::os::raw::c_long,
  pub ru_msgrcv: ::std::os::raw::c_long,
  pub ru_nsignals: ::std::os::raw::c_long,
  pub ru_nvcsw: ::std::os::raw::c_long,
  pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
  ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
  ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
  ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
  ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
  ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
  ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
  ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
  ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
  ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
  ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
  ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
  ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
  ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
  ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
  ["Offset of field: rusage::ru_nsignals"][::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
  ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
  ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
  ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
  ["Offset of field: rusage_info_v0::ri_uuid"][::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v0::ri_user_time"][::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v0::ri_system_time"][::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v0::ri_pageins"][::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v0::ri_wired_size"][::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v0::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v0::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
  pub ri_child_user_time: u64,
  pub ri_child_system_time: u64,
  pub ri_child_pkg_idle_wkups: u64,
  pub ri_child_interrupt_wkups: u64,
  pub ri_child_pageins: u64,
  pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
  ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
  ["Offset of field: rusage_info_v1::ri_uuid"][::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v1::ri_user_time"][::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v1::ri_system_time"][::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v1::ri_pageins"][::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v1::ri_wired_size"][::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v1::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v1::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
  ["Offset of field: rusage_info_v1::ri_child_user_time"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
  ["Offset of field: rusage_info_v1::ri_child_system_time"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
  ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
  ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
  ["Offset of field: rusage_info_v1::ri_child_pageins"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
  ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
    [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
  pub ri_child_user_time: u64,
  pub ri_child_system_time: u64,
  pub ri_child_pkg_idle_wkups: u64,
  pub ri_child_interrupt_wkups: u64,
  pub ri_child_pageins: u64,
  pub ri_child_elapsed_abstime: u64,
  pub ri_diskio_bytesread: u64,
  pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
  ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
  ["Offset of field: rusage_info_v2::ri_uuid"][::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v2::ri_user_time"][::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v2::ri_system_time"][::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v2::ri_pageins"][::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v2::ri_wired_size"][::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v2::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v2::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
  ["Offset of field: rusage_info_v2::ri_child_user_time"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
  ["Offset of field: rusage_info_v2::ri_child_system_time"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
  ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
  ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
  ["Offset of field: rusage_info_v2::ri_child_pageins"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
  ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
    [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
  ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
    [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
  ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
    [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
  pub ri_child_user_time: u64,
  pub ri_child_system_time: u64,
  pub ri_child_pkg_idle_wkups: u64,
  pub ri_child_interrupt_wkups: u64,
  pub ri_child_pageins: u64,
  pub ri_child_elapsed_abstime: u64,
  pub ri_diskio_bytesread: u64,
  pub ri_diskio_byteswritten: u64,
  pub ri_cpu_time_qos_default: u64,
  pub ri_cpu_time_qos_maintenance: u64,
  pub ri_cpu_time_qos_background: u64,
  pub ri_cpu_time_qos_utility: u64,
  pub ri_cpu_time_qos_legacy: u64,
  pub ri_cpu_time_qos_user_initiated: u64,
  pub ri_cpu_time_qos_user_interactive: u64,
  pub ri_billed_system_time: u64,
  pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
  ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
  ["Offset of field: rusage_info_v3::ri_uuid"][::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v3::ri_user_time"][::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v3::ri_system_time"][::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v3::ri_pageins"][::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v3::ri_wired_size"][::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v3::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v3::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
  ["Offset of field: rusage_info_v3::ri_child_user_time"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
  ["Offset of field: rusage_info_v3::ri_child_system_time"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
  ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
  ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
  ["Offset of field: rusage_info_v3::ri_child_pageins"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
  ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
    [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
  ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
    [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
  ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
    [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
  ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
    [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
  ["Offset of field: rusage_info_v3::ri_billed_system_time"]
    [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
  ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
    [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
  pub ri_child_user_time: u64,
  pub ri_child_system_time: u64,
  pub ri_child_pkg_idle_wkups: u64,
  pub ri_child_interrupt_wkups: u64,
  pub ri_child_pageins: u64,
  pub ri_child_elapsed_abstime: u64,
  pub ri_diskio_bytesread: u64,
  pub ri_diskio_byteswritten: u64,
  pub ri_cpu_time_qos_default: u64,
  pub ri_cpu_time_qos_maintenance: u64,
  pub ri_cpu_time_qos_background: u64,
  pub ri_cpu_time_qos_utility: u64,
  pub ri_cpu_time_qos_legacy: u64,
  pub ri_cpu_time_qos_user_initiated: u64,
  pub ri_cpu_time_qos_user_interactive: u64,
  pub ri_billed_system_time: u64,
  pub ri_serviced_system_time: u64,
  pub ri_logical_writes: u64,
  pub ri_lifetime_max_phys_footprint: u64,
  pub ri_instructions: u64,
  pub ri_cycles: u64,
  pub ri_billed_energy: u64,
  pub ri_serviced_energy: u64,
  pub ri_interval_max_phys_footprint: u64,
  pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
  ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
  ["Offset of field: rusage_info_v4::ri_uuid"][::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v4::ri_user_time"][::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v4::ri_system_time"][::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v4::ri_pageins"][::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v4::ri_wired_size"][::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v4::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v4::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
  ["Offset of field: rusage_info_v4::ri_child_user_time"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
  ["Offset of field: rusage_info_v4::ri_child_system_time"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
  ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
  ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
  ["Offset of field: rusage_info_v4::ri_child_pageins"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
  ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
    [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
  ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
    [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
  ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
    [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
  ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
    [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
  ["Offset of field: rusage_info_v4::ri_billed_system_time"]
    [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
  ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
    [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
  ["Offset of field: rusage_info_v4::ri_logical_writes"]
    [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
  ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
  ["Offset of field: rusage_info_v4::ri_instructions"]
    [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
  ["Offset of field: rusage_info_v4::ri_cycles"][::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
  ["Offset of field: rusage_info_v4::ri_billed_energy"]
    [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
  ["Offset of field: rusage_info_v4::ri_serviced_energy"]
    [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
  ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
  ["Offset of field: rusage_info_v4::ri_runnable_time"]
    [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
  pub ri_uuid: [u8; 16usize],
  pub ri_user_time: u64,
  pub ri_system_time: u64,
  pub ri_pkg_idle_wkups: u64,
  pub ri_interrupt_wkups: u64,
  pub ri_pageins: u64,
  pub ri_wired_size: u64,
  pub ri_resident_size: u64,
  pub ri_phys_footprint: u64,
  pub ri_proc_start_abstime: u64,
  pub ri_proc_exit_abstime: u64,
  pub ri_child_user_time: u64,
  pub ri_child_system_time: u64,
  pub ri_child_pkg_idle_wkups: u64,
  pub ri_child_interrupt_wkups: u64,
  pub ri_child_pageins: u64,
  pub ri_child_elapsed_abstime: u64,
  pub ri_diskio_bytesread: u64,
  pub ri_diskio_byteswritten: u64,
  pub ri_cpu_time_qos_default: u64,
  pub ri_cpu_time_qos_maintenance: u64,
  pub ri_cpu_time_qos_background: u64,
  pub ri_cpu_time_qos_utility: u64,
  pub ri_cpu_time_qos_legacy: u64,
  pub ri_cpu_time_qos_user_initiated: u64,
  pub ri_cpu_time_qos_user_interactive: u64,
  pub ri_billed_system_time: u64,
  pub ri_serviced_system_time: u64,
  pub ri_logical_writes: u64,
  pub ri_lifetime_max_phys_footprint: u64,
  pub ri_instructions: u64,
  pub ri_cycles: u64,
  pub ri_billed_energy: u64,
  pub ri_serviced_energy: u64,
  pub ri_interval_max_phys_footprint: u64,
  pub ri_runnable_time: u64,
  pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
  ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
  ["Offset of field: rusage_info_v5::ri_uuid"][::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
  ["Offset of field: rusage_info_v5::ri_user_time"][::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
  ["Offset of field: rusage_info_v5::ri_system_time"][::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
  ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
  ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
  ["Offset of field: rusage_info_v5::ri_pageins"][::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
  ["Offset of field: rusage_info_v5::ri_wired_size"][::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
  ["Offset of field: rusage_info_v5::ri_resident_size"]
    [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
  ["Offset of field: rusage_info_v5::ri_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
  ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
    [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
  ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
    [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
  ["Offset of field: rusage_info_v5::ri_child_user_time"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
  ["Offset of field: rusage_info_v5::ri_child_system_time"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
  ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
  ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
  ["Offset of field: rusage_info_v5::ri_child_pageins"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
  ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
    [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
  ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
    [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
  ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
    [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
  ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
    [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
  ["Offset of field: rusage_info_v5::ri_billed_system_time"]
    [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
  ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
    [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
  ["Offset of field: rusage_info_v5::ri_logical_writes"]
    [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
  ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
  ["Offset of field: rusage_info_v5::ri_instructions"]
    [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
  ["Offset of field: rusage_info_v5::ri_cycles"][::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
  ["Offset of field: rusage_info_v5::ri_billed_energy"]
    [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
  ["Offset of field: rusage_info_v5::ri_serviced_energy"]
    [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
  ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
    [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
  ["Offset of field: rusage_info_v5::ri_runnable_time"]
    [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
  ["Offset of field: rusage_info_v5::ri_flags"][::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
pub type rusage_info_current = rusage_info_v5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
  pub rlim_cur: rlim_t,
  pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
  ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
  ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
  ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
  pub wm_flags: u32,
  pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of proc_rlimit_control_wakeupmon"][::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
  ["Alignment of proc_rlimit_control_wakeupmon"][::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
  ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
    [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
  ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
    [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
extern "C" {
  pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getiopolicy_np(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setpriority(arg1: ::std::os::raw::c_int, arg2: id_t, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setiopolicy_np(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
  pub w_status: ::std::os::raw::c_int,
  pub w_T: wait__bindgen_ty_1,
  pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
  ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
  #[inline]
  pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
  }
  #[inline]
  pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 7u8, val as u64)
    }
  }
  #[inline]
  pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(7usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
  }
  #[inline]
  pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 16u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    w_Termsig: ::std::os::raw::c_uint,
    w_Coredump: ::std::os::raw::c_uint,
    w_Retcode: ::std::os::raw::c_uint,
    w_Filler: ::std::os::raw::c_uint,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 7u8, {
      let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
      w_Termsig as u64
    });
    __bindgen_bitfield_unit.set(7usize, 1u8, {
      let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
      w_Coredump as u64
    });
    __bindgen_bitfield_unit.set(8usize, 8u8, {
      let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
      w_Retcode as u64
    });
    __bindgen_bitfield_unit.set(16usize, 16u8, {
      let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
      w_Filler as u64
    });
    __bindgen_bitfield_unit
  }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
  ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
  #[inline]
  pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
  }
  #[inline]
  pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 16u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    w_Stopval: ::std::os::raw::c_uint,
    w_Stopsig: ::std::os::raw::c_uint,
    w_Filler: ::std::os::raw::c_uint,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
      w_Stopval as u64
    });
    __bindgen_bitfield_unit.set(8usize, 8u8, {
      let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
      w_Stopsig as u64
    });
    __bindgen_bitfield_unit.set(16usize, 16u8, {
      let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
      w_Filler as u64
    });
    __bindgen_bitfield_unit
  }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
  ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
  ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
  ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
  ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
extern "C" {
  pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
  pub fn waitpid(arg1: pid_t, arg2: *mut ::std::os::raw::c_int, arg3: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
  pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t, arg4: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wait3(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: *mut rusage) -> pid_t;
}
extern "C" {
  pub fn wait4(arg1: pid_t, arg2: *mut ::std::os::raw::c_int, arg3: ::std::os::raw::c_int, arg4: *mut rusage) -> pid_t;
}
extern "C" {
  pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
  pub quot: ::std::os::raw::c_int,
  pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
  ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
  ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
  ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
  pub quot: ::std::os::raw::c_long,
  pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
  ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
  ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
  ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
  pub quot: ::std::os::raw::c_longlong,
  pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
  ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
  ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
  ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
  pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
  pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn calloc(__count: ::std::os::raw::c_ulong, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn aligned_alloc(
    __alignment: ::std::os::raw::c_ulong,
    __size: ::std::os::raw::c_ulong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn posix_memalign(
    __memptr: *mut *mut ::std::os::raw::c_void,
    __alignment: usize,
    __size: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn abort() -> !;
}
extern "C" {
  pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
  pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn bsearch(
    __key: *const ::std::os::raw::c_void,
    __base: *const ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
  pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
  pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
  pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
  pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
  pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn qsort(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn strtod(arg1: *const ::std::os::raw::c_char, arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
  pub fn strtof(arg1: *const ::std::os::raw::c_char, arg2: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
  pub fn strtol(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn strtold(arg1: *const ::std::os::raw::c_char, arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
  pub fn strtoll(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn strtoul(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn strtoull(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
  pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
  pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn drand48() -> f64;
}
extern "C" {
  pub fn ecvt(
    arg1: f64,
    arg2: ::std::os::raw::c_int,
    arg3: *mut ::std::os::raw::c_int,
    arg4: *mut ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
  pub fn fcvt(
    arg1: f64,
    arg2: ::std::os::raw::c_int,
    arg3: *mut ::std::os::raw::c_int,
    arg4: *mut ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcvt(arg1: f64, arg2: ::std::os::raw::c_int, arg3: *mut ::std::os::raw::c_char)
    -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn getsubopt(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *const *mut ::std::os::raw::c_char,
    arg3: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn initstate(
    arg1: ::std::os::raw::c_uint,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
  pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn ptsname_r(
    fildes: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_char,
    buflen: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
  pub fn realpath(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn setenv(
    __name: *const ::std::os::raw::c_char,
    __value: *const ::std::os::raw::c_char,
    __overwrite: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
  pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn arc4random() -> u32;
}
extern "C" {
  pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
  pub fn arc4random_stir();
}
extern "C" {
  pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
  pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn bsearch_b(
    __key: *const ::std::os::raw::c_void,
    __base: *const ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: *mut ::std::os::raw::c_void,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn cgetcap(
    arg1: *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetent(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *mut *mut ::std::os::raw::c_char,
    arg3: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetfirst(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetmatch(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetnext(
    arg1: *mut *mut ::std::os::raw::c_char,
    arg2: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetnum(
    arg1: *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: *mut ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetstr(
    arg1: *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn cgetustr(
    arg1: *mut ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn devname_r(
    arg1: dev_t,
    arg2: mode_t,
    buf: *mut ::std::os::raw::c_char,
    len: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn getbsize(arg1: *mut ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn heapsort(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn heapsort_b(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mergesort(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mergesort_b(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn psort(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn psort_b(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn psort_r(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    arg1: *mut ::std::os::raw::c_void,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn qsort_b(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    __compar: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn qsort_r(
    __base: *mut ::std::os::raw::c_void,
    __nel: usize,
    __width: usize,
    arg1: *mut ::std::os::raw::c_void,
    __compar: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
      ) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn radixsort(
    __base: *mut *const ::std::os::raw::c_uchar,
    __nel: ::std::os::raw::c_int,
    __table: *const ::std::os::raw::c_uchar,
    __endbyte: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sradixsort(
    __base: *mut *const ::std::os::raw::c_uchar,
    __nel: ::std::os::raw::c_int,
    __table: *const ::std::os::raw::c_uchar,
    __endbyte: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sranddev();
}
extern "C" {
  pub fn srandomdev();
}
extern "C" {
  pub fn reallocf(__ptr: *mut ::std::os::raw::c_void, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn strtonum(
    __numstr: *const ::std::os::raw::c_char,
    __minval: ::std::os::raw::c_longlong,
    __maxval: ::std::os::raw::c_longlong,
    __errstrp: *mut *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn strtoq(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn strtouq(
    __str: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct km_stat_t {
  pub capacity: usize,
  pub available: usize,
  pub n_blocks: usize,
  pub n_cores: usize,
  pub largest: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of km_stat_t"][::std::mem::size_of::<km_stat_t>() - 40usize];
  ["Alignment of km_stat_t"][::std::mem::align_of::<km_stat_t>() - 8usize];
  ["Offset of field: km_stat_t::capacity"][::std::mem::offset_of!(km_stat_t, capacity) - 0usize];
  ["Offset of field: km_stat_t::available"][::std::mem::offset_of!(km_stat_t, available) - 8usize];
  ["Offset of field: km_stat_t::n_blocks"][::std::mem::offset_of!(km_stat_t, n_blocks) - 16usize];
  ["Offset of field: km_stat_t::n_cores"][::std::mem::offset_of!(km_stat_t, n_cores) - 24usize];
  ["Offset of field: km_stat_t::largest"][::std::mem::offset_of!(km_stat_t, largest) - 32usize];
};
extern "C" {
  pub fn kmalloc(km: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn krealloc(
    km: *mut ::std::os::raw::c_void,
    ptr: *mut ::std::os::raw::c_void,
    size: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn krelocate(
    km: *mut ::std::os::raw::c_void,
    ap: *mut ::std::os::raw::c_void,
    n_bytes: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn kcalloc(km: *mut ::std::os::raw::c_void, count: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn kfree(km: *mut ::std::os::raw::c_void, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn km_init() -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn km_init2(km_par: *mut ::std::os::raw::c_void, min_core_size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn km_destroy(km: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn km_stat(_km: *const ::std::os::raw::c_void, s: *mut km_stat_t);
}
extern "C" {
  pub fn km_stat_print(km: *const ::std::os::raw::c_void);
}
pub type khint32_t = ::std::os::raw::c_uint;
pub type khint64_t = ::std::os::raw::c_ulong;
pub type khint_t = khint32_t;
pub type khiter_t = khint_t;
pub const __ac_HASH_UPPER: f64 = 0.77;
pub type kh_cstr_t = *const ::std::os::raw::c_char;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
  pub __min: __darwin_rune_t,
  pub __max: __darwin_rune_t,
  pub __map: __darwin_rune_t,
  pub __types: *mut __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _RuneEntry"][::std::mem::size_of::<_RuneEntry>() - 24usize];
  ["Alignment of _RuneEntry"][::std::mem::align_of::<_RuneEntry>() - 8usize];
  ["Offset of field: _RuneEntry::__min"][::std::mem::offset_of!(_RuneEntry, __min) - 0usize];
  ["Offset of field: _RuneEntry::__max"][::std::mem::offset_of!(_RuneEntry, __max) - 4usize];
  ["Offset of field: _RuneEntry::__map"][::std::mem::offset_of!(_RuneEntry, __map) - 8usize];
  ["Offset of field: _RuneEntry::__types"][::std::mem::offset_of!(_RuneEntry, __types) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
  pub __nranges: ::std::os::raw::c_int,
  pub __ranges: *mut _RuneEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _RuneRange"][::std::mem::size_of::<_RuneRange>() - 16usize];
  ["Alignment of _RuneRange"][::std::mem::align_of::<_RuneRange>() - 8usize];
  ["Offset of field: _RuneRange::__nranges"][::std::mem::offset_of!(_RuneRange, __nranges) - 0usize];
  ["Offset of field: _RuneRange::__ranges"][::std::mem::offset_of!(_RuneRange, __ranges) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
  pub __name: [::std::os::raw::c_char; 14usize],
  pub __mask: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _RuneCharClass"][::std::mem::size_of::<_RuneCharClass>() - 20usize];
  ["Alignment of _RuneCharClass"][::std::mem::align_of::<_RuneCharClass>() - 4usize];
  ["Offset of field: _RuneCharClass::__name"][::std::mem::offset_of!(_RuneCharClass, __name) - 0usize];
  ["Offset of field: _RuneCharClass::__mask"][::std::mem::offset_of!(_RuneCharClass, __mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
  pub __magic: [::std::os::raw::c_char; 8usize],
  pub __encoding: [::std::os::raw::c_char; 32usize],
  pub __sgetrune: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *const ::std::os::raw::c_char,
      arg2: __darwin_size_t,
      arg3: *mut *const ::std::os::raw::c_char,
    ) -> __darwin_rune_t,
  >,
  pub __sputrune: ::std::option::Option<
    unsafe extern "C" fn(
      arg1: __darwin_rune_t,
      arg2: *mut ::std::os::raw::c_char,
      arg3: __darwin_size_t,
      arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub __invalid_rune: __darwin_rune_t,
  pub __runetype: [__uint32_t; 256usize],
  pub __maplower: [__darwin_rune_t; 256usize],
  pub __mapupper: [__darwin_rune_t; 256usize],
  pub __runetype_ext: _RuneRange,
  pub __maplower_ext: _RuneRange,
  pub __mapupper_ext: _RuneRange,
  pub __variable: *mut ::std::os::raw::c_void,
  pub __variable_len: ::std::os::raw::c_int,
  pub __ncharclasses: ::std::os::raw::c_int,
  pub __charclasses: *mut _RuneCharClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of _RuneLocale"][::std::mem::size_of::<_RuneLocale>() - 3208usize];
  ["Alignment of _RuneLocale"][::std::mem::align_of::<_RuneLocale>() - 8usize];
  ["Offset of field: _RuneLocale::__magic"][::std::mem::offset_of!(_RuneLocale, __magic) - 0usize];
  ["Offset of field: _RuneLocale::__encoding"][::std::mem::offset_of!(_RuneLocale, __encoding) - 8usize];
  ["Offset of field: _RuneLocale::__sgetrune"][::std::mem::offset_of!(_RuneLocale, __sgetrune) - 40usize];
  ["Offset of field: _RuneLocale::__sputrune"][::std::mem::offset_of!(_RuneLocale, __sputrune) - 48usize];
  ["Offset of field: _RuneLocale::__invalid_rune"][::std::mem::offset_of!(_RuneLocale, __invalid_rune) - 56usize];
  ["Offset of field: _RuneLocale::__runetype"][::std::mem::offset_of!(_RuneLocale, __runetype) - 60usize];
  ["Offset of field: _RuneLocale::__maplower"][::std::mem::offset_of!(_RuneLocale, __maplower) - 1084usize];
  ["Offset of field: _RuneLocale::__mapupper"][::std::mem::offset_of!(_RuneLocale, __mapupper) - 2108usize];
  ["Offset of field: _RuneLocale::__runetype_ext"][::std::mem::offset_of!(_RuneLocale, __runetype_ext) - 3136usize];
  ["Offset of field: _RuneLocale::__maplower_ext"][::std::mem::offset_of!(_RuneLocale, __maplower_ext) - 3152usize];
  ["Offset of field: _RuneLocale::__mapupper_ext"][::std::mem::offset_of!(_RuneLocale, __mapupper_ext) - 3168usize];
  ["Offset of field: _RuneLocale::__variable"][::std::mem::offset_of!(_RuneLocale, __variable) - 3184usize];
  ["Offset of field: _RuneLocale::__variable_len"][::std::mem::offset_of!(_RuneLocale, __variable_len) - 3192usize];
  ["Offset of field: _RuneLocale::__ncharclasses"][::std::mem::offset_of!(_RuneLocale, __ncharclasses) - 3196usize];
  ["Offset of field: _RuneLocale::__charclasses"][::std::mem::offset_of!(_RuneLocale, __charclasses) - 3200usize];
};
extern "C" {
  pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
  pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
  pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
  pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
  pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
  pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kstring_t {
  pub l: usize,
  pub m: usize,
  pub s: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __kstring_t"][::std::mem::size_of::<__kstring_t>() - 24usize];
  ["Alignment of __kstring_t"][::std::mem::align_of::<__kstring_t>() - 8usize];
  ["Offset of field: __kstring_t::l"][::std::mem::offset_of!(__kstring_t, l) - 0usize];
  ["Offset of field: __kstring_t::m"][::std::mem::offset_of!(__kstring_t, m) - 8usize];
  ["Offset of field: __kstring_t::s"][::std::mem::offset_of!(__kstring_t, s) - 16usize];
};
pub type kstring_t = __kstring_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ksw_extz_t {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
  pub max_q: ::std::os::raw::c_int,
  pub max_t: ::std::os::raw::c_int,
  pub mqe: ::std::os::raw::c_int,
  pub mqe_t: ::std::os::raw::c_int,
  pub mte: ::std::os::raw::c_int,
  pub mte_q: ::std::os::raw::c_int,
  pub score: ::std::os::raw::c_int,
  pub m_cigar: ::std::os::raw::c_int,
  pub n_cigar: ::std::os::raw::c_int,
  pub reach_end: ::std::os::raw::c_int,
  pub cigar: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of ksw_extz_t"][::std::mem::size_of::<ksw_extz_t>() - 56usize];
  ["Alignment of ksw_extz_t"][::std::mem::align_of::<ksw_extz_t>() - 8usize];
  ["Offset of field: ksw_extz_t::max_q"][::std::mem::offset_of!(ksw_extz_t, max_q) - 4usize];
  ["Offset of field: ksw_extz_t::max_t"][::std::mem::offset_of!(ksw_extz_t, max_t) - 8usize];
  ["Offset of field: ksw_extz_t::mqe"][::std::mem::offset_of!(ksw_extz_t, mqe) - 12usize];
  ["Offset of field: ksw_extz_t::mqe_t"][::std::mem::offset_of!(ksw_extz_t, mqe_t) - 16usize];
  ["Offset of field: ksw_extz_t::mte"][::std::mem::offset_of!(ksw_extz_t, mte) - 20usize];
  ["Offset of field: ksw_extz_t::mte_q"][::std::mem::offset_of!(ksw_extz_t, mte_q) - 24usize];
  ["Offset of field: ksw_extz_t::score"][::std::mem::offset_of!(ksw_extz_t, score) - 28usize];
  ["Offset of field: ksw_extz_t::m_cigar"][::std::mem::offset_of!(ksw_extz_t, m_cigar) - 32usize];
  ["Offset of field: ksw_extz_t::n_cigar"][::std::mem::offset_of!(ksw_extz_t, n_cigar) - 36usize];
  ["Offset of field: ksw_extz_t::reach_end"][::std::mem::offset_of!(ksw_extz_t, reach_end) - 40usize];
  ["Offset of field: ksw_extz_t::cigar"][::std::mem::offset_of!(ksw_extz_t, cigar) - 48usize];
};
impl ksw_extz_t {
  #[inline]
  pub fn max(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_max(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn zdropped(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_zdropped(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(31usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(max: u32, zdropped: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 31u8, {
      let max: u32 = unsafe { ::std::mem::transmute(max) };
      max as u64
    });
    __bindgen_bitfield_unit.set(31usize, 1u8, {
      let zdropped: u32 = unsafe { ::std::mem::transmute(zdropped) };
      zdropped as u64
    });
    __bindgen_bitfield_unit
  }
}
extern "C" {
  #[doc = " NW-like extension\n\n @param km        memory pool, when used with kalloc\n @param qlen      query length\n @param query     query sequence with 0 <= query[i] < m\n @param tlen      target length\n @param target    target sequence with 0 <= target[i] < m\n @param m         number of residue types\n @param mat       m*m scoring mattrix in one-dimension array\n @param gapo      gap open penalty; a gap of length l cost \"-(gapo+l*gape)\"\n @param gape      gap extension penalty\n @param w         band width (<0 to disable)\n @param zdrop     off-diagonal drop-off to stop extension (positive; <0 to disable)\n @param flag      flag (see KSW_EZ_* macros)\n @param ez        (out) scores and cigar"]
  pub fn ksw_extz(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    q: i8,
    e: i8,
    w: ::std::os::raw::c_int,
    zdrop: ::std::os::raw::c_int,
    flag: ::std::os::raw::c_int,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  pub fn ksw_extz2_sse(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    q: i8,
    e: i8,
    w: ::std::os::raw::c_int,
    zdrop: ::std::os::raw::c_int,
    end_bonus: ::std::os::raw::c_int,
    flag: ::std::os::raw::c_int,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  pub fn ksw_extd(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    gapo2: i8,
    gape2: i8,
    w: ::std::os::raw::c_int,
    zdrop: ::std::os::raw::c_int,
    flag: ::std::os::raw::c_int,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  pub fn ksw_extd2_sse(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    gapo2: i8,
    gape2: i8,
    w: ::std::os::raw::c_int,
    zdrop: ::std::os::raw::c_int,
    end_bonus: ::std::os::raw::c_int,
    flag: ::std::os::raw::c_int,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  pub fn ksw_exts2_sse(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    gapo2: i8,
    noncan: i8,
    zdrop: ::std::os::raw::c_int,
    junc_bonus: i8,
    flag: ::std::os::raw::c_int,
    junc: *const u8,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  pub fn ksw_extf2_sse(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    mch: i8,
    mis: i8,
    e: i8,
    w: ::std::os::raw::c_int,
    xdrop: ::std::os::raw::c_int,
    ez: *mut ksw_extz_t,
  );
}
extern "C" {
  #[doc = " Global alignment\n\n (first 10 parameters identical to ksw_extz_sse())\n @param m_cigar   (modified) max CIGAR length; feed 0 if cigar==0\n @param n_cigar   (out) number of CIGAR elements\n @param cigar     (out) BAM-encoded CIGAR; caller need to deallocate with kfree(km, )\n\n @return          score of the alignment"]
  pub fn ksw_gg(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    w: ::std::os::raw::c_int,
    m_cigar_: *mut ::std::os::raw::c_int,
    n_cigar_: *mut ::std::os::raw::c_int,
    cigar_: *mut *mut u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ksw_gg2(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    w: ::std::os::raw::c_int,
    m_cigar_: *mut ::std::os::raw::c_int,
    n_cigar_: *mut ::std::os::raw::c_int,
    cigar_: *mut *mut u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ksw_gg2_sse(
    km: *mut ::std::os::raw::c_void,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    m: i8,
    mat: *const i8,
    gapo: i8,
    gape: i8,
    w: ::std::os::raw::c_int,
    m_cigar_: *mut ::std::os::raw::c_int,
    n_cigar_: *mut ::std::os::raw::c_int,
    cigar_: *mut *mut u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ksw_ll_qinit(
    km: *mut ::std::os::raw::c_void,
    size: ::std::os::raw::c_int,
    qlen: ::std::os::raw::c_int,
    query: *const u8,
    m: ::std::os::raw::c_int,
    mat: *const i8,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn ksw_ll_i16(
    q: *mut ::std::os::raw::c_void,
    tlen: ::std::os::raw::c_int,
    target: *const u8,
    gapo: ::std::os::raw::c_int,
    gape: ::std::os::raw::c_int,
    qe: *mut ::std::os::raw::c_int,
    te: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __assert_rtn(
    arg1: *const ::std::os::raw::c_char,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
    arg4: *const ::std::os::raw::c_char,
  ) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_seed_t {
  pub n: u32,
  pub q_pos: u32,
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
  pub cr: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_seed_t"][::std::mem::size_of::<mm_seed_t>() - 24usize];
  ["Alignment of mm_seed_t"][::std::mem::align_of::<mm_seed_t>() - 8usize];
  ["Offset of field: mm_seed_t::n"][::std::mem::offset_of!(mm_seed_t, n) - 0usize];
  ["Offset of field: mm_seed_t::q_pos"][::std::mem::offset_of!(mm_seed_t, q_pos) - 4usize];
  ["Offset of field: mm_seed_t::cr"][::std::mem::offset_of!(mm_seed_t, cr) - 16usize];
};
impl mm_seed_t {
  #[inline]
  pub fn q_span(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_q_span(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn flt(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_flt(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(31usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn seg_id(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_seg_id(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(32usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn is_tandem(&self) -> u32 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_is_tandem(&mut self, val: u32) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(63usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(q_span: u32, flt: u32, seg_id: u32, is_tandem: u32) -> __BindgenBitfieldUnit<[u8; 8usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 31u8, {
      let q_span: u32 = unsafe { ::std::mem::transmute(q_span) };
      q_span as u64
    });
    __bindgen_bitfield_unit.set(31usize, 1u8, {
      let flt: u32 = unsafe { ::std::mem::transmute(flt) };
      flt as u64
    });
    __bindgen_bitfield_unit.set(32usize, 31u8, {
      let seg_id: u32 = unsafe { ::std::mem::transmute(seg_id) };
      seg_id as u64
    });
    __bindgen_bitfield_unit.set(63usize, 1u8, {
      let is_tandem: u32 = unsafe { ::std::mem::transmute(is_tandem) };
      is_tandem as u64
    });
    __bindgen_bitfield_unit
  }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_seg_t {
  pub n_u: ::std::os::raw::c_int,
  pub n_a: ::std::os::raw::c_int,
  pub u: *mut u64,
  pub a: *mut mm128_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of mm_seg_t"][::std::mem::size_of::<mm_seg_t>() - 24usize];
  ["Alignment of mm_seg_t"][::std::mem::align_of::<mm_seg_t>() - 8usize];
  ["Offset of field: mm_seg_t::n_u"][::std::mem::offset_of!(mm_seg_t, n_u) - 0usize];
  ["Offset of field: mm_seg_t::n_a"][::std::mem::offset_of!(mm_seg_t, n_a) - 4usize];
  ["Offset of field: mm_seg_t::u"][::std::mem::offset_of!(mm_seg_t, u) - 8usize];
  ["Offset of field: mm_seg_t::a"][::std::mem::offset_of!(mm_seg_t, a) - 16usize];
};
extern "C" {
  pub fn cputime() -> f64;
}
extern "C" {
  pub fn realtime() -> f64;
}
extern "C" {
  pub fn peakrss() -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn radix_sort_128x(beg: *mut mm128_t, end: *mut mm128_t);
}
extern "C" {
  pub fn radix_sort_64(beg: *mut u64, end: *mut u64);
}
extern "C" {
  pub fn ks_ksmall_uint32_t(n: usize, arr: *mut u32, kk: usize) -> u32;
}
extern "C" {
  pub fn mm_sketch(
    km: *mut ::std::os::raw::c_void,
    str_: *const ::std::os::raw::c_char,
    len: ::std::os::raw::c_int,
    w: ::std::os::raw::c_int,
    k: ::std::os::raw::c_int,
    rid: u32,
    is_hpc: ::std::os::raw::c_int,
    p: *mut mm128_v,
  );
}
extern "C" {
  pub fn mm_collect_matches(
    km: *mut ::std::os::raw::c_void,
    _n_m: *mut ::std::os::raw::c_int,
    qlen: ::std::os::raw::c_int,
    max_occ: ::std::os::raw::c_int,
    max_max_occ: ::std::os::raw::c_int,
    dist: ::std::os::raw::c_int,
    mi: *const mm_idx_t,
    mv: *const mm128_v,
    n_a: *mut i64,
    rep_len: *mut ::std::os::raw::c_int,
    n_mini_pos: *mut ::std::os::raw::c_int,
    mini_pos: *mut *mut u64,
  ) -> *mut mm_seed_t;
}
extern "C" {
  pub fn mm_seed_mz_flt(km: *mut ::std::os::raw::c_void, mv: *mut mm128_v, q_occ_max: i32, q_occ_frac: f32);
}
extern "C" {
  pub fn mm_event_identity(r: *const mm_reg1_t) -> f64;
}
extern "C" {
  pub fn mm_write_sam_hdr(
    mi: *const mm_idx_t,
    rg: *const ::std::os::raw::c_char,
    ver: *const ::std::os::raw::c_char,
    argc: ::std::os::raw::c_int,
    argv: *mut *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_write_paf(
    s: *mut kstring_t,
    mi: *const mm_idx_t,
    t: *const mm_bseq1_t,
    r: *const mm_reg1_t,
    km: *mut ::std::os::raw::c_void,
    opt_flag: i64,
  );
}
extern "C" {
  pub fn mm_write_paf3(
    s: *mut kstring_t,
    mi: *const mm_idx_t,
    t: *const mm_bseq1_t,
    r: *const mm_reg1_t,
    km: *mut ::std::os::raw::c_void,
    opt_flag: i64,
    rep_len: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn mm_write_sam(
    s: *mut kstring_t,
    mi: *const mm_idx_t,
    t: *const mm_bseq1_t,
    r: *const mm_reg1_t,
    n_regs: ::std::os::raw::c_int,
    regs: *const mm_reg1_t,
  );
}
extern "C" {
  pub fn mm_write_sam2(
    s: *mut kstring_t,
    mi: *const mm_idx_t,
    t: *const mm_bseq1_t,
    seg_idx: ::std::os::raw::c_int,
    reg_idx: ::std::os::raw::c_int,
    n_seg: ::std::os::raw::c_int,
    n_regs: *const ::std::os::raw::c_int,
    regs: *const *const mm_reg1_t,
    km: *mut ::std::os::raw::c_void,
    opt_flag: i64,
  );
}
extern "C" {
  pub fn mm_write_sam3(
    s: *mut kstring_t,
    mi: *const mm_idx_t,
    t: *const mm_bseq1_t,
    seg_idx: ::std::os::raw::c_int,
    reg_idx: ::std::os::raw::c_int,
    n_seg: ::std::os::raw::c_int,
    n_regss: *const ::std::os::raw::c_int,
    regss: *const *const mm_reg1_t,
    km: *mut ::std::os::raw::c_void,
    opt_flag: i64,
    rep_len: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn mm_idxopt_init(opt: *mut mm_idxopt_t);
}
extern "C" {
  pub fn mm_idx_get(mi: *const mm_idx_t, minier: u64, n: *mut ::std::os::raw::c_int) -> *const u64;
}
extern "C" {
  pub fn mm_idx_cal_max_occ(mi: *const mm_idx_t, f: f32) -> i32;
}
extern "C" {
  pub fn mm_idx_getseq2(
    mi: *const mm_idx_t,
    is_rev: ::std::os::raw::c_int,
    rid: u32,
    st: u32,
    en: u32,
    seq: *mut u8,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_align_skeleton(
    km: *mut ::std::os::raw::c_void,
    opt: *const mm_mapopt_t,
    mi: *const mm_idx_t,
    qlen: ::std::os::raw::c_int,
    qstr: *const ::std::os::raw::c_char,
    n_regs_: *mut ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
    a: *mut mm128_t,
  ) -> *mut mm_reg1_t;
}
extern "C" {
  pub fn mm_gen_regs(
    km: *mut ::std::os::raw::c_void,
    hash: u32,
    qlen: ::std::os::raw::c_int,
    n_u: ::std::os::raw::c_int,
    u: *mut u64,
    a: *mut mm128_t,
    is_qstrand: ::std::os::raw::c_int,
  ) -> *mut mm_reg1_t;
}
extern "C" {
  pub fn mm_chain_dp(
    max_dist_x: ::std::os::raw::c_int,
    max_dist_y: ::std::os::raw::c_int,
    bw: ::std::os::raw::c_int,
    max_skip: ::std::os::raw::c_int,
    max_iter: ::std::os::raw::c_int,
    min_cnt: ::std::os::raw::c_int,
    min_sc: ::std::os::raw::c_int,
    gap_scale: f32,
    is_cdna: ::std::os::raw::c_int,
    n_segs: ::std::os::raw::c_int,
    n: i64,
    a: *mut mm128_t,
    n_u_: *mut ::std::os::raw::c_int,
    _u: *mut *mut u64,
    km: *mut ::std::os::raw::c_void,
  ) -> *mut mm128_t;
}
extern "C" {
  pub fn mg_lchain_dp(
    max_dist_x: ::std::os::raw::c_int,
    max_dist_y: ::std::os::raw::c_int,
    bw: ::std::os::raw::c_int,
    max_skip: ::std::os::raw::c_int,
    max_iter: ::std::os::raw::c_int,
    min_cnt: ::std::os::raw::c_int,
    min_sc: ::std::os::raw::c_int,
    chn_pen_gap: f32,
    chn_pen_skip: f32,
    is_cdna: ::std::os::raw::c_int,
    n_segs: ::std::os::raw::c_int,
    n: i64,
    a: *mut mm128_t,
    n_u_: *mut ::std::os::raw::c_int,
    _u: *mut *mut u64,
    km: *mut ::std::os::raw::c_void,
  ) -> *mut mm128_t;
}
extern "C" {
  pub fn mg_lchain_rmq(
    max_dist: ::std::os::raw::c_int,
    max_dist_inner: ::std::os::raw::c_int,
    bw: ::std::os::raw::c_int,
    max_chn_skip: ::std::os::raw::c_int,
    cap_rmq_size: ::std::os::raw::c_int,
    min_cnt: ::std::os::raw::c_int,
    min_sc: ::std::os::raw::c_int,
    chn_pen_gap: f32,
    chn_pen_skip: f32,
    n: i64,
    a: *mut mm128_t,
    n_u_: *mut ::std::os::raw::c_int,
    _u: *mut *mut u64,
    km: *mut ::std::os::raw::c_void,
  ) -> *mut mm128_t;
}
extern "C" {
  pub fn mm_mark_alt(mi: *const mm_idx_t, n: ::std::os::raw::c_int, r: *mut mm_reg1_t);
}
extern "C" {
  pub fn mm_split_reg(
    r: *mut mm_reg1_t,
    r2: *mut mm_reg1_t,
    n: ::std::os::raw::c_int,
    qlen: ::std::os::raw::c_int,
    a: *mut mm128_t,
    is_qstrand: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn mm_sync_regs(km: *mut ::std::os::raw::c_void, n_regs: ::std::os::raw::c_int, regs: *mut mm_reg1_t);
}
extern "C" {
  pub fn mm_squeeze_a(
    km: *mut ::std::os::raw::c_void,
    n_regs: ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
    a: *mut mm128_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_set_sam_pri(n: ::std::os::raw::c_int, r: *mut mm_reg1_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_set_parent(
    km: *mut ::std::os::raw::c_void,
    mask_level: f32,
    mask_len: ::std::os::raw::c_int,
    n: ::std::os::raw::c_int,
    r: *mut mm_reg1_t,
    sub_diff: ::std::os::raw::c_int,
    hard_mask_level: ::std::os::raw::c_int,
    alt_diff_frac: f32,
  );
}
extern "C" {
  pub fn mm_select_sub(
    km: *mut ::std::os::raw::c_void,
    pri_ratio: f32,
    min_diff: ::std::os::raw::c_int,
    best_n: ::std::os::raw::c_int,
    check_strand: ::std::os::raw::c_int,
    min_strand_sc: ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
    r: *mut mm_reg1_t,
  );
}
extern "C" {
  pub fn mm_select_sub_multi(
    km: *mut ::std::os::raw::c_void,
    pri_ratio: f32,
    pri1: f32,
    pri2: f32,
    max_gap_ref: ::std::os::raw::c_int,
    min_diff: ::std::os::raw::c_int,
    best_n: ::std::os::raw::c_int,
    n_segs: ::std::os::raw::c_int,
    qlens: *const ::std::os::raw::c_int,
    n_: *mut ::std::os::raw::c_int,
    r: *mut mm_reg1_t,
  );
}
extern "C" {
  pub fn mm_filter_strand_retained(n_regs: ::std::os::raw::c_int, r: *mut mm_reg1_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_filter_regs(
    opt: *const mm_mapopt_t,
    qlen: ::std::os::raw::c_int,
    n_regs: *mut ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
  );
}
extern "C" {
  pub fn mm_hit_sort(
    km: *mut ::std::os::raw::c_void,
    n_regs: *mut ::std::os::raw::c_int,
    r: *mut mm_reg1_t,
    alt_diff_frac: f32,
  );
}
extern "C" {
  pub fn mm_set_mapq(
    km: *mut ::std::os::raw::c_void,
    n_regs: ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
    min_chain_sc: ::std::os::raw::c_int,
    match_sc: ::std::os::raw::c_int,
    rep_len: ::std::os::raw::c_int,
    is_sr: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn mm_update_dp_max(
    qlen: ::std::os::raw::c_int,
    n_regs: ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
    frac: f32,
    a: ::std::os::raw::c_int,
    b: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn mm_est_err(
    mi: *const mm_idx_t,
    qlen: ::std::os::raw::c_int,
    n_regs: ::std::os::raw::c_int,
    regs: *mut mm_reg1_t,
    a: *const mm128_t,
    n: i32,
    mini_pos: *const u64,
  );
}
extern "C" {
  pub fn mm_seg_gen(
    km: *mut ::std::os::raw::c_void,
    hash: u32,
    n_segs: ::std::os::raw::c_int,
    qlens: *const ::std::os::raw::c_int,
    n_regs0: ::std::os::raw::c_int,
    regs0: *const mm_reg1_t,
    n_regs: *mut ::std::os::raw::c_int,
    regs: *mut *mut mm_reg1_t,
    a: *const mm128_t,
  ) -> *mut mm_seg_t;
}
extern "C" {
  pub fn mm_seg_free(km: *mut ::std::os::raw::c_void, n_segs: ::std::os::raw::c_int, segs: *mut mm_seg_t);
}
extern "C" {
  pub fn mm_pair(
    km: *mut ::std::os::raw::c_void,
    max_gap_ref: ::std::os::raw::c_int,
    dp_bonus: ::std::os::raw::c_int,
    sub_diff: ::std::os::raw::c_int,
    match_sc: ::std::os::raw::c_int,
    qlens: *const ::std::os::raw::c_int,
    n_regs: *mut ::std::os::raw::c_int,
    regs: *mut *mut mm_reg1_t,
  );
}
extern "C" {
  pub fn mm_split_init(prefix: *const ::std::os::raw::c_char, mi: *const mm_idx_t) -> *mut FILE;
}
extern "C" {
  pub fn mm_split_merge_prep(
    prefix: *const ::std::os::raw::c_char,
    n_splits: ::std::os::raw::c_int,
    fp: *mut *mut FILE,
    n_seq_part: *mut u32,
  ) -> *mut mm_idx_t;
}
extern "C" {
  pub fn mm_split_merge(
    n_segs: ::std::os::raw::c_int,
    fn_: *mut *const ::std::os::raw::c_char,
    opt: *const mm_mapopt_t,
    n_split_idx: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn mm_split_rm_tmp(prefix: *const ::std::os::raw::c_char, n_splits: ::std::os::raw::c_int);
}
extern "C" {
  pub fn mm_err_puts(str_: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn mm_err_fwrite(p: *const ::std::os::raw::c_void, size: usize, nitems: usize, fp: *mut FILE);
}
extern "C" {
  pub fn mm_err_fread(p: *mut ::std::os::raw::c_void, size: usize, nitems: usize, fp: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ketopt_t {
  pub ind: ::std::os::raw::c_int,
  pub opt: ::std::os::raw::c_int,
  pub arg: *mut ::std::os::raw::c_char,
  pub longidx: ::std::os::raw::c_int,
  pub i: ::std::os::raw::c_int,
  pub pos: ::std::os::raw::c_int,
  pub n_args: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of ketopt_t"][::std::mem::size_of::<ketopt_t>() - 32usize];
  ["Alignment of ketopt_t"][::std::mem::align_of::<ketopt_t>() - 8usize];
  ["Offset of field: ketopt_t::ind"][::std::mem::offset_of!(ketopt_t, ind) - 0usize];
  ["Offset of field: ketopt_t::opt"][::std::mem::offset_of!(ketopt_t, opt) - 4usize];
  ["Offset of field: ketopt_t::arg"][::std::mem::offset_of!(ketopt_t, arg) - 8usize];
  ["Offset of field: ketopt_t::longidx"][::std::mem::offset_of!(ketopt_t, longidx) - 16usize];
  ["Offset of field: ketopt_t::i"][::std::mem::offset_of!(ketopt_t, i) - 20usize];
  ["Offset of field: ketopt_t::pos"][::std::mem::offset_of!(ketopt_t, pos) - 24usize];
  ["Offset of field: ketopt_t::n_args"][::std::mem::offset_of!(ketopt_t, n_args) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ko_longopt_t {
  pub name: *mut ::std::os::raw::c_char,
  pub has_arg: ::std::os::raw::c_int,
  pub val: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of ko_longopt_t"][::std::mem::size_of::<ko_longopt_t>() - 16usize];
  ["Alignment of ko_longopt_t"][::std::mem::align_of::<ko_longopt_t>() - 8usize];
  ["Offset of field: ko_longopt_t::name"][::std::mem::offset_of!(ko_longopt_t, name) - 0usize];
  ["Offset of field: ko_longopt_t::has_arg"][::std::mem::offset_of!(ko_longopt_t, has_arg) - 8usize];
  ["Offset of field: ko_longopt_t::val"][::std::mem::offset_of!(ko_longopt_t, val) - 12usize];
};
extern "C" {
  pub static mut KETOPT_INIT: ketopt_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ks_isort_stack_t {
  pub left: *mut ::std::os::raw::c_void,
  pub right: *mut ::std::os::raw::c_void,
  pub depth: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of ks_isort_stack_t"][::std::mem::size_of::<ks_isort_stack_t>() - 24usize];
  ["Alignment of ks_isort_stack_t"][::std::mem::align_of::<ks_isort_stack_t>() - 8usize];
  ["Offset of field: ks_isort_stack_t::left"][::std::mem::offset_of!(ks_isort_stack_t, left) - 0usize];
  ["Offset of field: ks_isort_stack_t::right"][::std::mem::offset_of!(ks_isort_stack_t, right) - 8usize];
  ["Offset of field: ks_isort_stack_t::depth"][::std::mem::offset_of!(ks_isort_stack_t, depth) - 16usize];
};
pub type ksstr_t = *const ::std::os::raw::c_char;
extern "C" {
  pub fn kt_for(
    n_threads: ::std::os::raw::c_int,
    func: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
      ),
    >,
    data: *mut ::std::os::raw::c_void,
    n: ::std::os::raw::c_long,
  );
}
extern "C" {
  pub fn kt_pipeline(
    n_threads: ::std::os::raw::c_int,
    func: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
      ) -> *mut ::std::os::raw::c_void,
    >,
    shared_data: *mut ::std::os::raw::c_void,
    n_steps: ::std::os::raw::c_int,
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdust_buf_s {
  _unused: [u8; 0],
}
pub type sdust_buf_t = sdust_buf_s;
extern "C" {
  pub fn sdust(
    km: *mut ::std::os::raw::c_void,
    seq: *const u8,
    l_seq: ::std::os::raw::c_int,
    T: ::std::os::raw::c_int,
    W: ::std::os::raw::c_int,
    n: *mut ::std::os::raw::c_int,
  ) -> *mut u64;
}
extern "C" {
  pub fn sdust_buf_init(km: *mut ::std::os::raw::c_void) -> *mut sdust_buf_t;
}
extern "C" {
  pub fn sdust_buf_destroy(buf: *mut sdust_buf_t);
}
extern "C" {
  pub fn sdust_core(
    seq: *const u8,
    l_seq: ::std::os::raw::c_int,
    T: ::std::os::raw::c_int,
    W: ::std::os::raw::c_int,
    n: *mut ::std::os::raw::c_int,
    buf: *mut sdust_buf_t,
  ) -> *const u64;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_bucket_s {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_idx_intv_s {
  pub _address: u8,
}
pub type __uint128_t = u128;
