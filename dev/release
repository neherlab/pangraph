#!/usr/bin/env bash

set -euo pipefail

# Prepares a release of a new version of CLI
#
# Usage: ./scripts/release <bump-type>
# <bump-type>: major, minor, patch, rc, beta, alpha, or explicit version
#
# Dependencies for CLI releases:
#
#  1. Rust toolchain (see developer guide in docs/dev/developer-guide.md)
#  2. dasel:
#    mkdir -p "${HOME}/bin"
#    export PATH="${HOME}/bin:${PATH}"
#    curl -fsSL "https://github.com/TomWright/dasel/releases/download/v2.8.1/dasel_linux_amd64" -o "${HOME}/bin/dasel" && chmod +x "${HOME}/bin/dasel"
#  3. cargo-edit for cargo set-version
#    cargo install cargo-edit
#
#  Usage examples:
#
#    ./scripts/release minor
#    ./scripts/release patch


function ask_confirmation_or_exit() {
  choice=
  while [ "$choice" != "y" ]; do
    read -r -p "${1} | Type 'y' or 'n' >> " choice
    case "$choice" in
    y | Y)
      break
      ;;
    n | N)
      echo "Aborted by user."
      exit 0
      ;;
    *)
      echo "Invalid answer. Type 'y' or 'n' (without quotation marks), or hit Ctrl+C to exit forcefully." >/dev/stderr
      ;;
    esac
  done
}

if [ $# -ne 1 ]; then
  echo "Usage: $0 <bump-type>" >&2
  exit 1
fi

BUMP_TYPE="${1}"

printf "Pre-check: valid release type... "
if ! [[ "${BUMP_TYPE}" =~ ^(major|minor|patch|rc|beta|alpha|[0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
  printf "\nUnknown release type: %s. Specify one of: major, minor, patch, rc, beta, alpha, or explicit version.\n" "${BUMP_TYPE}" >&2
  exit 1
fi
printf "✅\n"

printf "Pre-check: working directory is not dirty... "
if [ -n "$(git status -s)" ]; then
  printf "\nWorking directory is dirty.\nUncommitted changes detected. Refusing to proceed.\nStash or commit the changes and retry.\n" >&2
  exit 1
fi
printf "✅\n"

printf "Pre-check: on main branch... "
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "${BRANCH}" != "master" ]; then
  ask_confirmation_or_exit "You are trying to make a release from branch '${BRANCH}'. Releases from non-'master' branches are discouraged. Do you want to proceed anyway?"
  printf "⚠️  Proceeding to releasing from non-master branch \"%s\".\n" "${BRANCH}"
else
  printf "✅\n"
fi

printf "Pre-check: Cargo.lock is in sync with Cargo.toml... "
cargo metadata --quiet >/dev/null
if [ -n "$(git status --porcelain Cargo.lock)" ]; then
  printf "\nERROR: Cargo.lock is out of sync with Cargo.toml. Run 'cargo metadata' or 'cargo build' and commit the result before releasing.\n" >&2
  exit 1
fi
printf "✅\n"

printf "Pre-check: changelog contains \`## Unreleased\` section... "
if ! grep -q "^## Unreleased" CHANGELOG.md 2>/dev/null; then
  printf "\nERROR: CHANGELOG.md does not contain \`## Unreleased\` section. Create a new section for the upcoming release, commit it and retry.\n" >&2
  exit 1
fi
printf "✅\n"

printf "Bump Cargo.toml version..."
PREV_VERSION=$(dasel select -r toml -w - -s ".workspace.package.version" -f "Cargo.toml")
cargo set-version --workspace --exclude="minimap2-sys" --bump="${BUMP_TYPE}" 2>&1 | awk '!/^\s*Upgrading / && !/^\s*$/'
VERSION=$(dasel select -r toml -w - -s ".workspace.package.version" -f "Cargo.toml")
if [ "${VERSION}" == "${PREV_VERSION}" ]; then
  echo "ERROR: Version did not change after cargo set-version." >&2
  exit 1
fi
printf "✅\n"

printf "Releasing %s (up from %s) ✅\n" "${VERSION}" "${PREV_VERSION}"

printf "Check if the version was set correctly... "
if [ "${VERSION}" == "${PREV_VERSION}" ]; then
  echo "ERROR: Failed to set version in Cargo.toml." >&2
  exit 1
fi
printf "✅\n"

printf "Updating CHANGELOG.md... "
if ! grep -q '^## Unreleased' CHANGELOG.md 2>/dev/null; then
  echo "ERROR: '## Unreleased' not found in CHANGELOG.md. No replacement occurred." >&2
  exit 1
fi
if ! sed -i'' "s/^## Unreleased/## ${VERSION}/" CHANGELOG.md 2>/dev/null; then
  echo "ERROR: sed failed to run." >&2
  exit 1
fi
if ! grep -q "^## ${VERSION}" CHANGELOG.md 2>/dev/null; then
  echo "ERROR: Replacement failed: '## ${VERSION}' not found in CHANGELOG.md after sed." >&2
  exit 1
fi
printf "✅\n"

printf "\nThe following changes have been made:\n"
printf "%s\n" "--- BEGIN ---"
git --no-pager diff --unified=0 --no-prefix --no-commit-id
printf "%s\n\n" "--- END ---"

printf "Committing changes... "
git add -A >/dev/null
git commit -m "chore: release ${VERSION}" >/dev/null
printf "✅\n"

printf "\n\nRelease %s is now on the local branch (%s) and is ready to be pushed:\n" "${VERSION}" "${BRANCH}"
printf "\n  git push origin <branch>\n"
printf "\n\nIf you want to release to production, assuming the changes are on the master branch, usually you fast-forward the release-cli branch to the master branch, then push:\n"
printf "\n  git checkout release-cli\n"
printf "  git merge --ff-only master\n"
printf "\n  git push origin release-cli\n"
printf "\n\n"
printf "As always, before pushing anything, it is advisable to use your favorite GUI git client to review the changes and view the branch tree to make sure you are doing what you mean to do.\n"
